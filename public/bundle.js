/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,n,t={20:(e,n,t)=>{var r=t(540),a=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function s(e,n,t){var r,s={},u=null,c=null;for(r in void 0!==t&&(u=""+t),void 0!==n.key&&(u=""+n.key),void 0!==n.ref&&(c=n.ref),n)o.call(n,r)&&!l.hasOwnProperty(r)&&(s[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===s[r]&&(s[r]=n[r]);return{$$typeof:a,type:e,key:u,ref:c,props:s,_owner:i.current}}n.jsx=s,n.jsxs=s},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var f=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)n[f].references++,n[f].updater(p);else{var m=a(p,r);r.byIndex=l,n.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=t(o[i]);n[l].references--}for(var s=r(e,a),u=0;u<o.length;u++){var c=t(o[u]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=s}}},111:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([e.id,":root {\n  --primary-color: #FF8C00; /* Dark Orange */\n  --secondary-color: #FFA500; /* Orange */\n  --light-color: #F8F9FA;\n  --dark-color: #333;\n  --max-width: 1200px;\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Roboto', sans-serif;\n  line-height: 1.6;\n  background-color: var(--light-color);\n  color: var(--dark-color);\n}\n\na {\n  text-decoration: none;\n  color: var(--primary-color);\n}\n\nul {\n  list-style: none;\n}\n\n.container {\n  max-width: var(--max-width);\n  margin: 0 auto;\n  padding: 0 2rem;\n}\n\n.btn {\n  display: inline-block;\n  background: var(--primary-color);\n  color: #fff;\n  padding: 0.5rem 1.5rem;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: opacity 0.2s ease-in;\n}\n\n.btn:hover {\n  opacity: 0.9;\n}\n\nsection {\n  padding: 3rem 0;\n}\n\n@media (max-width: 768px) {\n  .container {\n    padding: 0 1rem;\n  }\n}\n","",{version:3,sources:["webpack://./client/src/styles/main.css"],names:[],mappings:"AAAA;EACE,wBAAwB,EAAE,gBAAgB;EAC1C,0BAA0B,EAAE,WAAW;EACvC,sBAAsB;EACtB,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iCAAiC;EACjC,gBAAgB;EAChB,oCAAoC;EACpC,wBAAwB;AAC1B;;AAEA;EACE,qBAAqB;EACrB,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,2BAA2B;EAC3B,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,gCAAgC;EAChC,WAAW;EACX,sBAAsB;EACtB,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,eAAe;EACf,gCAAgC;AAClC;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,eAAe;EACjB;AACF",sourcesContent:[":root {\n  --primary-color: #FF8C00; /* Dark Orange */\n  --secondary-color: #FFA500; /* Orange */\n  --light-color: #F8F9FA;\n  --dark-color: #333;\n  --max-width: 1200px;\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Roboto', sans-serif;\n  line-height: 1.6;\n  background-color: var(--light-color);\n  color: var(--dark-color);\n}\n\na {\n  text-decoration: none;\n  color: var(--primary-color);\n}\n\nul {\n  list-style: none;\n}\n\n.container {\n  max-width: var(--max-width);\n  margin: 0 auto;\n  padding: 0 2rem;\n}\n\n.btn {\n  display: inline-block;\n  background: var(--primary-color);\n  color: #fff;\n  padding: 0.5rem 1.5rem;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: opacity 0.2s ease-in;\n}\n\n.btn:hover {\n  opacity: 0.9;\n}\n\nsection {\n  padding: 3rem 0;\n}\n\n@media (max-width: 768px) {\n  .container {\n    padding: 0 1rem;\n  }\n}\n"],sourceRoot:""}]);const l=i},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},183:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([e.id,'/* Resources.css */\n:root {\n    --primary: #4527A0;\n    --secondary: #7B1FA2;\n    --accent: #E1BEE7;\n    --background: #f8fafc;\n    --text: #2c3e50;\n    --card-bg: #ffffff;\n    --hover-bg: #311B92;\n    --gradient-start: #4527A0;\n    --gradient-end: #7B1FA2;\n    --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --card-shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  }\n  \n  body {\n    font-family: \'Segoe UI\', sans-serif;\n    background-color: var(--background);\n    color: var(--text);\n    margin: 0;\n    padding: 0;\n  }\n  \n  .resources-container {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n  \n  header {\n    background: linear-gradient(135deg, var(--gradient-start), var(--gradient-end));\n    padding: 80px 20px;\n    text-align: center;\n    position: relative;\n    overflow: hidden;\n  }\n\n  header::before {\n    content: \'\';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><defs><linearGradient id="a" x1="0%" y1="0%" x2="100%" y2="100%"><stop offset="0%" stop-color="%23E1BEE7" stop-opacity="0.2"/><stop offset="100%" stop-color="%239C27B0" stop-opacity="0.1"/></linearGradient></defs><path d="M0,0 L1000,0 L1000,1000 L0,1000 Z" fill="url(%23a)"/><circle cx="500" cy="500" r="400" fill="none" stroke="%23E1BEE7" stroke-width="2" stroke-dasharray="50 30" stroke-opacity="0.3"/></svg>\');\n    opacity: 0.1;\n    mix-blend-mode: soft-light;\n  }\n  \n  header h1 {\n    font-size: 3.5rem;\n    margin-bottom: 20px;\n    color: white;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);\n    font-weight: 600;\n    letter-spacing: -0.5px;\n    position: relative;\n  }\n\n  header p {\n    font-size: 1.4rem;\n    max-width: 800px;\n    margin: 0 auto;\n    color: rgba(255,255,255,0.9);\n    line-height: 1.6;\n    position: relative;\n  }\n  \n  .container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 60px 20px;\n    display: grid;\n    gap: 40px;\n  }\n  \n  .section {\n    background: white;\n    border-radius: 16px;\n    padding: 30px;\n    box-shadow: var(--card-shadow);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .section::before {\n    content: \'\';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 4px;\n    height: 100%;\n    background: linear-gradient(to bottom, var(--gradient-start), var(--gradient-end));\n  }\n\n  .section:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--card-shadow-hover);\n  }\n  \n  .section h2 {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    color: var(--primary);\n    font-size: 1.8rem;\n    margin-bottom: 20px;\n  }\n  \n  .resources-wrapper {\n    overflow: hidden;\n    position: relative;\n    width: 100%;\n  }\n  \n  .resources-track {\n    display: flex;\n    flex-wrap: nowrap;\n    gap: 20px;\n    animation: scroll-left 60s linear infinite;\n    width: max-content;\n  }\n  \n  .resources-wrapper:hover .resources-track {\n    animation-play-state: paused;\n  }\n  \n  @keyframes scroll-left {\n    0% { transform: translateX(0); }\n    100% { transform: translateX(-50%); }\n  }\n  \n  .resource-card {\n    flex: 0 0 300px;\n    background: var(--card-bg);\n    border-radius: 12px;\n    padding: 25px;\n    margin: 15px;\n    box-shadow: var(--card-shadow);\n    transition: all 0.3s ease;\n    border: 1px solid rgba(0,0,0,0.05);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .resource-card::after {\n    content: \'\';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .resource-card:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--card-shadow-hover);\n  }\n\n  .resource-card:hover::after {\n    opacity: 1;\n  }\n\n  \n  .resource-card h3 {\n    color: var(--primary);\n    font-size: 1.2rem;\n    margin-top: 0;\n  }\n  \n  .resource-card p {\n    font-size: 0.95rem;\n    margin-bottom: 15px;\n  }\n  \n  .resource-card a {\n    display: inline-block;\n    text-decoration: none;\n    padding: 10px 18px;\n    background-color: var(--primary);\n    color: #fff;\n    border-radius: 6px;\n    font-weight: 500;\n    font-size: 0.9rem;\n  }\n  \n  .resource-card a:hover {\n    background-color: var(--hover-bg);\n  }\n  \n  .fade-element {\n    opacity: 0;\n    transform: translateY(20px);\n    transition: opacity 0.8s ease, transform 0.8s ease;\n  }\n  \n  .fade-in {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  /* Data icon specific styling */\n  .section[data-icon="apps"] { \n    background-position: left top;\n    background-repeat: no-repeat;\n    background-size: 48px;\n  }\n  \n  .section[data-icon="gov"] { \n    background-position: left top;\n    background-repeat: no-repeat;\n    background-size: 48px;\n  }\n  \n  /* Media queries for responsive design */\n  @media (max-width: 768px) {\n    header {\n      padding: 40px 20px;\n    }\n    \n    header h1 {\n      font-size: 2.2rem;\n    }\n    \n    .section h2 {\n      font-size: 1.5rem;\n    }\n    \n    .resource-card {\n      flex: 0 0 280px;\n    }\n  }',"",{version:3,sources:["webpack://./client/src/pages/Resources.css"],names:[],mappings:"AAAA,kBAAkB;AAClB;IACI,kBAAkB;IAClB,oBAAoB;IACpB,iBAAiB;IACjB,qBAAqB;IACrB,eAAe;IACf,kBAAkB;IAClB,mBAAmB;IACnB,yBAAyB;IACzB,uBAAuB;IACvB,oFAAoF;IACpF,4FAA4F;EAC9F;;EAEA;IACE,mCAAmC;IACnC,mCAAmC;IACnC,kBAAkB;IAClB,SAAS;IACT,UAAU;EACZ;;EAEA;IACE,WAAW;IACX,eAAe;IACf,aAAa;IACb,sBAAsB;EACxB;;EAEA;IACE,+EAA+E;IAC/E,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;EAClB;;EAEA;IACE,WAAW;IACX,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,ggBAAggB;IAChgB,YAAY;IACZ,0BAA0B;EAC5B;;EAEA;IACE,iBAAiB;IACjB,mBAAmB;IACnB,YAAY;IACZ,wCAAwC;IACxC,gBAAgB;IAChB,sBAAsB;IACtB,kBAAkB;EACpB;;EAEA;IACE,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;IACd,4BAA4B;IAC5B,gBAAgB;IAChB,kBAAkB;EACpB;;EAEA;IACE,iBAAiB;IACjB,cAAc;IACd,kBAAkB;IAClB,aAAa;IACb,SAAS;EACX;;EAEA;IACE,iBAAiB;IACjB,mBAAmB;IACnB,aAAa;IACb,8BAA8B;IAC9B,qDAAqD;IACrD,kBAAkB;IAClB,gBAAgB;EAClB;;EAEA;IACE,WAAW;IACX,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,UAAU;IACV,YAAY;IACZ,kFAAkF;EACpF;;EAEA;IACE,2BAA2B;IAC3B,oCAAoC;EACtC;;EAEA;IACE,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,qBAAqB;IACrB,iBAAiB;IACjB,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;IAChB,kBAAkB;IAClB,WAAW;EACb;;EAEA;IACE,aAAa;IACb,iBAAiB;IACjB,SAAS;IACT,0CAA0C;IAC1C,kBAAkB;EACpB;;EAEA;IACE,4BAA4B;EAC9B;;EAEA;IACE,KAAK,wBAAwB,EAAE;IAC/B,OAAO,2BAA2B,EAAE;EACtC;;EAEA;IACE,eAAe;IACf,0BAA0B;IAC1B,mBAAmB;IACnB,aAAa;IACb,YAAY;IACZ,8BAA8B;IAC9B,yBAAyB;IACzB,kCAAkC;IAClC,kBAAkB;IAClB,gBAAgB;EAClB;;EAEA;IACE,WAAW;IACX,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,QAAQ;IACR,WAAW;IACX,iFAAiF;IACjF,UAAU;IACV,6BAA6B;EAC/B;;EAEA;IACE,2BAA2B;IAC3B,oCAAoC;EACtC;;EAEA;IACE,UAAU;EACZ;;;EAGA;IACE,qBAAqB;IACrB,iBAAiB;IACjB,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,mBAAmB;EACrB;;EAEA;IACE,qBAAqB;IACrB,qBAAqB;IACrB,kBAAkB;IAClB,gCAAgC;IAChC,WAAW;IACX,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;EACnB;;EAEA;IACE,iCAAiC;EACnC;;EAEA;IACE,UAAU;IACV,2BAA2B;IAC3B,kDAAkD;EACpD;;EAEA;IACE,UAAU;IACV,wBAAwB;EAC1B;;EAEA,+BAA+B;EAC/B;IACE,6BAA6B;IAC7B,4BAA4B;IAC5B,qBAAqB;EACvB;;EAEA;IACE,6BAA6B;IAC7B,4BAA4B;IAC5B,qBAAqB;EACvB;;EAEA,wCAAwC;EACxC;IACE;MACE,kBAAkB;IACpB;;IAEA;MACE,iBAAiB;IACnB;;IAEA;MACE,iBAAiB;IACnB;;IAEA;MACE,eAAe;IACjB;EACF",sourcesContent:['/* Resources.css */\n:root {\n    --primary: #4527A0;\n    --secondary: #7B1FA2;\n    --accent: #E1BEE7;\n    --background: #f8fafc;\n    --text: #2c3e50;\n    --card-bg: #ffffff;\n    --hover-bg: #311B92;\n    --gradient-start: #4527A0;\n    --gradient-end: #7B1FA2;\n    --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --card-shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  }\n  \n  body {\n    font-family: \'Segoe UI\', sans-serif;\n    background-color: var(--background);\n    color: var(--text);\n    margin: 0;\n    padding: 0;\n  }\n  \n  .resources-container {\n    width: 100%;\n    max-width: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n  \n  header {\n    background: linear-gradient(135deg, var(--gradient-start), var(--gradient-end));\n    padding: 80px 20px;\n    text-align: center;\n    position: relative;\n    overflow: hidden;\n  }\n\n  header::before {\n    content: \'\';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><defs><linearGradient id="a" x1="0%" y1="0%" x2="100%" y2="100%"><stop offset="0%" stop-color="%23E1BEE7" stop-opacity="0.2"/><stop offset="100%" stop-color="%239C27B0" stop-opacity="0.1"/></linearGradient></defs><path d="M0,0 L1000,0 L1000,1000 L0,1000 Z" fill="url(%23a)"/><circle cx="500" cy="500" r="400" fill="none" stroke="%23E1BEE7" stroke-width="2" stroke-dasharray="50 30" stroke-opacity="0.3"/></svg>\');\n    opacity: 0.1;\n    mix-blend-mode: soft-light;\n  }\n  \n  header h1 {\n    font-size: 3.5rem;\n    margin-bottom: 20px;\n    color: white;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);\n    font-weight: 600;\n    letter-spacing: -0.5px;\n    position: relative;\n  }\n\n  header p {\n    font-size: 1.4rem;\n    max-width: 800px;\n    margin: 0 auto;\n    color: rgba(255,255,255,0.9);\n    line-height: 1.6;\n    position: relative;\n  }\n  \n  .container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 60px 20px;\n    display: grid;\n    gap: 40px;\n  }\n  \n  .section {\n    background: white;\n    border-radius: 16px;\n    padding: 30px;\n    box-shadow: var(--card-shadow);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .section::before {\n    content: \'\';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 4px;\n    height: 100%;\n    background: linear-gradient(to bottom, var(--gradient-start), var(--gradient-end));\n  }\n\n  .section:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--card-shadow-hover);\n  }\n  \n  .section h2 {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    color: var(--primary);\n    font-size: 1.8rem;\n    margin-bottom: 20px;\n  }\n  \n  .resources-wrapper {\n    overflow: hidden;\n    position: relative;\n    width: 100%;\n  }\n  \n  .resources-track {\n    display: flex;\n    flex-wrap: nowrap;\n    gap: 20px;\n    animation: scroll-left 60s linear infinite;\n    width: max-content;\n  }\n  \n  .resources-wrapper:hover .resources-track {\n    animation-play-state: paused;\n  }\n  \n  @keyframes scroll-left {\n    0% { transform: translateX(0); }\n    100% { transform: translateX(-50%); }\n  }\n  \n  .resource-card {\n    flex: 0 0 300px;\n    background: var(--card-bg);\n    border-radius: 12px;\n    padding: 25px;\n    margin: 15px;\n    box-shadow: var(--card-shadow);\n    transition: all 0.3s ease;\n    border: 1px solid rgba(0,0,0,0.05);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .resource-card::after {\n    content: \'\';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n\n  .resource-card:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--card-shadow-hover);\n  }\n\n  .resource-card:hover::after {\n    opacity: 1;\n  }\n\n  \n  .resource-card h3 {\n    color: var(--primary);\n    font-size: 1.2rem;\n    margin-top: 0;\n  }\n  \n  .resource-card p {\n    font-size: 0.95rem;\n    margin-bottom: 15px;\n  }\n  \n  .resource-card a {\n    display: inline-block;\n    text-decoration: none;\n    padding: 10px 18px;\n    background-color: var(--primary);\n    color: #fff;\n    border-radius: 6px;\n    font-weight: 500;\n    font-size: 0.9rem;\n  }\n  \n  .resource-card a:hover {\n    background-color: var(--hover-bg);\n  }\n  \n  .fade-element {\n    opacity: 0;\n    transform: translateY(20px);\n    transition: opacity 0.8s ease, transform 0.8s ease;\n  }\n  \n  .fade-in {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  /* Data icon specific styling */\n  .section[data-icon="apps"] { \n    background-position: left top;\n    background-repeat: no-repeat;\n    background-size: 48px;\n  }\n  \n  .section[data-icon="gov"] { \n    background-position: left top;\n    background-repeat: no-repeat;\n    background-size: 48px;\n  }\n  \n  /* Media queries for responsive design */\n  @media (max-width: 768px) {\n    header {\n      padding: 40px 20px;\n    }\n    \n    header h1 {\n      font-size: 2.2rem;\n    }\n    \n    .section h2 {\n      font-size: 1.5rem;\n    }\n    \n    .resource-card {\n      flex: 0 0 280px;\n    }\n  }'],sourceRoot:""}]);const l=i},287:(e,n)=>{var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,A={};function g(e,n,t){this.props=e,this.context=n,this.refs=A,this.updater=t||m}function v(){}function b(e,n,t){this.props=e,this.context=n,this.refs=A,this.updater=t||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var y=b.prototype=new v;y.constructor=b,h(y,g.prototype),y.isPureReactComponent=!0;var x=Array.isArray,C=Object.prototype.hasOwnProperty,B={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,n,r){var a,o={},i=null,l=null;if(null!=n)for(a in void 0!==n.ref&&(l=n.ref),void 0!==n.key&&(i=""+n.key),n)C.call(n,a)&&!E.hasOwnProperty(a)&&(o[a]=n[a]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===o[a]&&(o[a]=s[a]);return{$$typeof:t,type:e,key:i,ref:l,props:o,_owner:B.current}}function w(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var S=/\/+/g;function I(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function N(e,n,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case t:case r:s=!0}}if(s)return i=i(s=e),e=""===o?"."+I(s,0):o,x(i)?(a="",null!=e&&(a=e.replace(S,"$&/")+"/"),N(i,n,a,"",(function(e){return e}))):null!=i&&(w(i)&&(i=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(S,"$&/")+"/")+e)),n.push(i)),1;if(s=0,o=""===o?".":o+":",x(e))for(var u=0;u<e.length;u++){var c=o+I(l=e[u],u);s+=N(l,n,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=N(l=l.value,n,a,c=o+I(l,u++),i);else if("object"===l)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return s}function j(e,n,t){if(null==e)return e;var r=[],a=0;return N(e,r,"","",(function(e){return n.call(t,e,a++)})),r}function _(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var z={current:null},P={transition:null},T={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:P,ReactCurrentOwner:B};function R(){throw Error("act(...) is not supported in production builds of React.")}n.Children={map:j,forEach:function(e,n,t){j(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return j(e,(function(){n++})),n},toArray:function(e){return j(e,(function(e){return e}))||[]},only:function(e){if(!w(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=g,n.Fragment=a,n.Profiler=i,n.PureComponent=b,n.StrictMode=o,n.Suspense=c,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,n.act=R,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=n){if(void 0!==n.ref&&(i=n.ref,l=B.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in n)C.call(n,u)&&!E.hasOwnProperty(u)&&(a[u]=void 0===n[u]&&void 0!==s?s[u]:n[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}return{$$typeof:t,type:e.type,key:o,ref:i,props:a,_owner:l}},n.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},n.createElement=k,n.createFactory=function(e){var n=k.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:u,render:e}},n.isValidElement=w,n.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:_}},n.memo=function(e,n){return{$$typeof:d,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=P.transition;P.transition={};try{e()}finally{P.transition=n}},n.unstable_act=R,n.useCallback=function(e,n){return z.current.useCallback(e,n)},n.useContext=function(e){return z.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return z.current.useDeferredValue(e)},n.useEffect=function(e,n){return z.current.useEffect(e,n)},n.useId=function(){return z.current.useId()},n.useImperativeHandle=function(e,n,t){return z.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return z.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return z.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return z.current.useMemo(e,n)},n.useReducer=function(e,n,t){return z.current.useReducer(e,n,t)},n.useRef=function(e){return z.current.useRef(e)},n.useState=function(e){return z.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return z.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return z.current.useTransition()},n.version="18.3.1"},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},338:(e,n,t)=>{var r=t(961);n.H=r.createRoot,r.hydrateRoot},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},463:(e,n)=>{function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,a=e[r];if(!(0<o(a,n)))break e;e[r]=n,e[t]=a,t=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>o(s,t))u<a&&0>o(c,s)?(e[r]=c,e[u]=t,r=u):(e[r]=s,e[l]=t,r=l);else{if(!(u<a&&0>o(c,t)))break e;e[r]=c,e[u]=t,r=u}}}return n}function o(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;n.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();n.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,p=3,m=!1,h=!1,A=!1,g="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function y(e){for(var n=r(c);null!==n;){if(null===n.callback)a(c);else{if(!(n.startTime<=e))break;a(c),n.sortIndex=n.expirationTime,t(u,n)}n=r(c)}}function x(e){if(A=!1,y(e),!h)if(null!==r(u))h=!0,P(C);else{var n=r(c);null!==n&&T(x,n.startTime-e)}}function C(e,t){h=!1,A&&(A=!1,v(w),w=-1),m=!0;var o=p;try{for(y(t),f=r(u);null!==f&&(!(f.expirationTime>t)||e&&!N());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=t);t=n.unstable_now(),"function"==typeof l?f.callback=l:f===r(u)&&a(u),y(t)}else a(u);f=r(u)}if(null!==f)var s=!0;else{var d=r(c);null!==d&&T(x,d.startTime-t),s=!1}return s}finally{f=null,p=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var B,E=!1,k=null,w=-1,S=5,I=-1;function N(){return!(n.unstable_now()-I<S)}function j(){if(null!==k){var e=n.unstable_now();I=e;var t=!0;try{t=k(!0,e)}finally{t?B():(E=!1,k=null)}}else E=!1}if("function"==typeof b)B=function(){b(j)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,z=_.port2;_.port1.onmessage=j,B=function(){z.postMessage(null)}}else B=function(){g(j,0)};function P(e){k=e,E||(E=!0,B())}function T(e,t){w=g((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){h||m||(h=!0,P(C))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):S=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return p},n.unstable_getFirstCallbackNode=function(){return r(u)},n.unstable_next=function(e){switch(p){case 1:case 2:case 3:var n=3;break;default:n=p}var t=p;p=n;try{return e()}finally{p=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=p;p=e;try{return n()}finally{p=t}},n.unstable_scheduleCallback=function(e,a,o){var i=n.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,t(c,e),null===r(u)&&e===r(c)&&(A?(v(w),w=-1):A=!0,T(x,o-i))):(e.sortIndex=l,t(u,e),h||m||(h=!0,P(C))),e},n.unstable_shouldYield=N,n.unstable_wrapCallback=function(e){var n=p;return function(){var t=p;p=n;try{return e.apply(this,arguments)}finally{p=t}}}},540:(e,n,t)=>{e.exports=t(287)},551:(e,n,t)=>{var r=t(540),a=t(982);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,n){u(e,n),u(e+"Capture",n)}function u(e,n){for(l[e]=n,e=0;e<n.length;e++)i.add(n[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function h(e,n,t,r,a,o,i){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=o,this.removeEmptyString=i}var A={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){A[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];A[n]=new h(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){A[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){A[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){A[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){A[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){A[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){A[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){A[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,n,t,r){var a=A.hasOwnProperty(n)?A[n]:null;(null!==a?0!==a.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,a,r)&&(t=null),r||null===a?function(e){return!!d.call(m,e)||!d.call(p,e)&&(f.test(e)?m[e]=!0:(p[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):a.mustUseProperty?e[a.propertyName]=null===t?3!==a.type&&"":t:(n=a.attributeName,r=a.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(a=a.type)||4===a&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(g,v);A[n]=new h(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(g,v);A[n]=new h(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(g,v);A[n]=new h(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){A[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),A.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){A[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),C=Symbol.for("react.portal"),B=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),w=Symbol.for("react.provider"),S=Symbol.for("react.context"),I=Symbol.for("react.forward_ref"),N=Symbol.for("react.suspense"),j=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),z=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var P=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var L,M=Object.assign;function O(e){if(void 0===L)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);L=n&&n[1]||""}return"\n"+L+e}var F=!1;function D(e,n){if(!e||F)return"";F=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var a=n.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?O(e):""}function U(e){switch(e.tag){case 5:return O(e.type);case 16:return O("Lazy");case 13:return O("Suspense");case 19:return O("SuspenseList");case 0:case 2:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case B:return"Fragment";case C:return"Portal";case k:return"Profiler";case E:return"StrictMode";case N:return"Suspense";case j:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return(e.displayName||"Context")+".Consumer";case w:return(e._context.displayName||"Context")+".Provider";case I:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(n=e.displayName||null)?n:q(e.type)||"Memo";case z:n=e._payload,e=e._init;try{return q(e(n))}catch(e){}}return null}function W(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return q(n);case 8:return n===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Q(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function H(e){e._valueTracker||(e._valueTracker=function(e){var n=Q(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var a=t.get,o=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function $(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function X(e,n){var t=n.checked;return M({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function K(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=V(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function Z(e,n){null!=(n=n.checked)&&b(e,"checked",n,!1)}function G(e,n){Z(e,n);var t=V(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,V(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function J(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&Y(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var a=0;a<t.length;a++)n["$"+t[a]]=!0;for(t=0;t<e.length;t++)a=n.hasOwnProperty("$"+e[t].value),e[t].selected!==a&&(e[t].selected=a),a&&r&&(e[t].defaultSelected=!0)}else{for(t=""+V(t),n=null,a=0;a<e.length;a++){if(e[a].value===t)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==n||e[a].disabled||(n=e[a])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(o(91));return M({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(o(92));if(ne(t)){if(1<t.length)throw Error(o(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:V(t)}}function oe(e,n){var t=V(n.value),r=V(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ie(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?le(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,n)}))}:ce);function fe(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||pe.hasOwnProperty(e)&&pe[e]?(""+n).trim():n+"px"}function Ae(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),a=he(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,a):e[t]=a}}Object.keys(pe).forEach((function(e){me.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),pe[n]=pe[e]}))}));var ge=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,n){if(n){if(ge[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(o(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(o(62))}}function be(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Be=null,Ee=null;function ke(e){if(e=ba(e)){if("function"!=typeof Ce)throw Error(o(280));var n=e.stateNode;n&&(n=xa(n),Ce(e.stateNode,e.type,n))}}function we(e){Be?Ee?Ee.push(e):Ee=[e]:Be=e}function Se(){if(Be){var e=Be,n=Ee;if(Ee=Be=null,ke(e),n)for(e=0;e<n.length;e++)ke(n[e])}}function Ie(e,n){return e(n)}function Ne(){}var je=!1;function _e(e,n,t){if(je)return e(n,t);je=!0;try{return Ie(e,n,t)}finally{je=!1,(null!==Be||null!==Ee)&&(Ne(),Se())}}function ze(e,n){var t=e.stateNode;if(null===t)return null;var r=xa(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(o(231,n,typeof t));return t}var Pe=!1;if(c)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){Pe=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(ce){Pe=!1}function Re(e,n,t,r,a,o,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{n.apply(t,u)}catch(e){this.onError(e)}}var Le=!1,Me=null,Oe=!1,Fe=null,De={onError:function(e){Le=!0,Me=e}};function Ue(e,n,t,r,a,o,i,l,s){Le=!1,Me=null,Re.apply(De,arguments)}function qe(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function We(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function Ve(e){if(qe(e)!==e)throw Error(o(188))}function Qe(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=qe(e)))throw Error(o(188));return n!==e?null:e}for(var t=e,r=n;;){var a=t.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){t=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===t)return Ve(a),e;if(i===r)return Ve(a),n;i=i.sibling}throw Error(o(188))}if(t.return!==r.return)t=a,r=i;else{for(var l=!1,s=a.child;s;){if(s===t){l=!0,t=a,r=i;break}if(s===r){l=!0,r=a,t=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===t){l=!0,t=i,r=a;break}if(s===r){l=!0,r=i,t=a;break}s=s.sibling}if(!l)throw Error(o(189))}}if(t.alternate!==r)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?e:n}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=He(e);if(null!==n)return n;e=e.sibling}return null}var $e=a.unstable_scheduleCallback,Ye=a.unstable_cancelCallback,Xe=a.unstable_shouldYield,Ke=a.unstable_requestPaint,Ze=a.unstable_now,Ge=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,en=a.unstable_UserBlockingPriority,nn=a.unstable_NormalPriority,tn=a.unstable_LowPriority,rn=a.unstable_IdlePriority,an=null,on=null,ln=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(sn(e)/un|0)|0},sn=Math.log,un=Math.LN2,cn=64,dn=4194304;function fn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&t;if(0!==i){var l=i&~a;0!==l?r=fn(l):0!=(o&=i)&&(r=fn(o))}else 0!=(i=t&~a)?r=fn(i):0!==o&&(r=fn(o));if(0===r)return 0;if(0!==n&&n!==r&&!(n&a)&&((a=r&-r)>=(o=n&-n)||16===a&&4194240&o))return n;if(4&r&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)a=1<<(t=31-ln(n)),r|=e[t],n&=~a;return r}function mn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function hn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function An(){var e=cn;return!(4194240&(cn<<=1))&&(cn=64),e}function gn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function vn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-ln(n)]=t}function bn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-ln(t),a=1<<r;a&n|e[r]&n&&(e[r]|=n),t&=~a}}var yn=0;function xn(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var Cn,Bn,En,kn,wn,Sn=!1,In=[],Nn=null,jn=null,_n=null,zn=new Map,Pn=new Map,Tn=[],Rn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ln(e,n){switch(e){case"focusin":case"focusout":Nn=null;break;case"dragenter":case"dragleave":jn=null;break;case"mouseover":case"mouseout":_n=null;break;case"pointerover":case"pointerout":zn.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pn.delete(n.pointerId)}}function Mn(e,n,t,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==n&&null!==(n=ba(n))&&Bn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==a&&-1===n.indexOf(a)&&n.push(a),e)}function On(e){var n=va(e.target);if(null!==n){var t=qe(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=We(t)))return e.blockedOn=n,void wn(e.priority,(function(){En(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Fn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Kn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=ba(t))&&Bn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);ye=r,t.target.dispatchEvent(r),ye=null,n.shift()}return!0}function Dn(e,n,t){Fn(e)&&t.delete(n)}function Un(){Sn=!1,null!==Nn&&Fn(Nn)&&(Nn=null),null!==jn&&Fn(jn)&&(jn=null),null!==_n&&Fn(_n)&&(_n=null),zn.forEach(Dn),Pn.forEach(Dn)}function qn(e,n){e.blockedOn===n&&(e.blockedOn=null,Sn||(Sn=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Un)))}function Wn(e){function n(n){return qn(n,e)}if(0<In.length){qn(In[0],e);for(var t=1;t<In.length;t++){var r=In[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Nn&&qn(Nn,e),null!==jn&&qn(jn,e),null!==_n&&qn(_n,e),zn.forEach(n),Pn.forEach(n),t=0;t<Tn.length;t++)(r=Tn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<Tn.length&&null===(t=Tn[0]).blockedOn;)On(t),null===t.blockedOn&&Tn.shift()}var Vn=y.ReactCurrentBatchConfig,Qn=!0;function Hn(e,n,t,r){var a=yn,o=Vn.transition;Vn.transition=null;try{yn=1,Yn(e,n,t,r)}finally{yn=a,Vn.transition=o}}function $n(e,n,t,r){var a=yn,o=Vn.transition;Vn.transition=null;try{yn=4,Yn(e,n,t,r)}finally{yn=a,Vn.transition=o}}function Yn(e,n,t,r){if(Qn){var a=Kn(e,n,t,r);if(null===a)Vr(e,n,r,Xn,t),Ln(e,r);else if(function(e,n,t,r,a){switch(n){case"focusin":return Nn=Mn(Nn,e,n,t,r,a),!0;case"dragenter":return jn=Mn(jn,e,n,t,r,a),!0;case"mouseover":return _n=Mn(_n,e,n,t,r,a),!0;case"pointerover":var o=a.pointerId;return zn.set(o,Mn(zn.get(o)||null,e,n,t,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Pn.set(o,Mn(Pn.get(o)||null,e,n,t,r,a)),!0}return!1}(a,e,n,t,r))r.stopPropagation();else if(Ln(e,r),4&n&&-1<Rn.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&Cn(o),null===(o=Kn(e,n,t,r))&&Vr(e,n,r,Xn,t),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,n,r,null,t)}}var Xn=null;function Kn(e,n,t,r){if(Xn=null,null!==(e=va(e=xe(r))))if(null===(n=qe(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=We(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Xn=e,null}function Zn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ge()){case Je:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Gn=null,Jn=null,et=null;function nt(){if(et)return et;var e,n,t=Jn,r=t.length,a="value"in Gn?Gn.value:Gn.textContent,o=a.length;for(e=0;e<r&&t[e]===a[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===a[o-n];n++);return et=a.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function at(){return!1}function ot(e){function n(n,t,r,a,o){for(var i in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(n=e[i],this[i]=n?n(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rt:at,this.isPropagationStopped=at,this}return M(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var it,lt,st,ut={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ct=ot(ut),dt=M({},ut,{view:0,detail:0}),ft=ot(dt),pt=M({},dt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kt,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==st&&(st&&"mousemove"===e.type?(it=e.screenX-st.screenX,lt=e.screenY-st.screenY):lt=it=0,st=e),it)},movementY:function(e){return"movementY"in e?e.movementY:lt}}),mt=ot(pt),ht=ot(M({},pt,{dataTransfer:0})),At=ot(M({},dt,{relatedTarget:0})),gt=ot(M({},ut,{animationName:0,elapsedTime:0,pseudoElement:0})),vt=M({},ut,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bt=ot(vt),yt=ot(M({},ut,{data:0})),xt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ct={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Bt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Et(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=Bt[e])&&!!n[e]}function kt(){return Et}var wt=M({},dt,{key:function(e){if(e.key){var n=xt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Ct[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kt,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),St=ot(wt),It=ot(M({},pt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nt=ot(M({},dt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kt})),jt=ot(M({},ut,{propertyName:0,elapsedTime:0,pseudoElement:0})),_t=M({},pt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),zt=ot(_t),Pt=[9,13,27,32],Tt=c&&"CompositionEvent"in window,Rt=null;c&&"documentMode"in document&&(Rt=document.documentMode);var Lt=c&&"TextEvent"in window&&!Rt,Mt=c&&(!Tt||Rt&&8<Rt&&11>=Rt),Ot=String.fromCharCode(32),Ft=!1;function Dt(e,n){switch(e){case"keyup":return-1!==Pt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ut(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qt=!1,Wt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Wt[e.type]:"textarea"===n}function Qt(e,n,t,r){we(r),0<(n=Hr(n,"onChange")).length&&(t=new ct("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Ht=null,$t=null;function Yt(e){Or(e,0)}function Xt(e){if($(ya(e)))return e}function Kt(e,n){if("change"===e)return n}var Zt=!1;if(c){var Gt;if(c){var Jt="oninput"in document;if(!Jt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jt="function"==typeof er.oninput}Gt=Jt}else Gt=!1;Zt=Gt&&(!document.documentMode||9<document.documentMode)}function nr(){Ht&&(Ht.detachEvent("onpropertychange",tr),$t=Ht=null)}function tr(e){if("value"===e.propertyName&&Xt($t)){var n=[];Qt(n,$t,e,xe(e)),_e(Yt,n)}}function rr(e,n,t){"focusin"===e?(nr(),$t=t,(Ht=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xt($t)}function or(e,n){if("click"===e)return Xt(n)}function ir(e,n){if("input"===e||"change"===e)return Xt(n)}var lr="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function sr(e,n){if(lr(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var a=t[r];if(!d.call(n,a)||!lr(e[a],n[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,n){var t,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?dr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function fr(){for(var e=window,n=Y();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=Y((e=n.contentWindow).document)}return n}function pr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function mr(e){var n=fr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&dr(t.ownerDocument.documentElement,t)){if(null!==r&&pr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var a=t.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(t,o);var i=cr(t,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((n=n.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(n),e.extend(i.node,i.offset)):(n.setEnd(i.node,i.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,Ar=null,gr=null,vr=null,br=!1;function yr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;br||null==Ar||Ar!==Y(r)||(r="selectionStart"in(r=Ar)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&sr(vr,r)||(vr=r,0<(r=Hr(gr,"onSelect")).length&&(n=new ct("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=Ar)))}function xr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Cr={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},Br={},Er={};function kr(e){if(Br[e])return Br[e];if(!Cr[e])return e;var n,t=Cr[e];for(n in t)if(t.hasOwnProperty(n)&&n in Er)return Br[e]=t[n];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var wr=kr("animationend"),Sr=kr("animationiteration"),Ir=kr("animationstart"),Nr=kr("transitionend"),jr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function zr(e,n){jr.set(e,n),s(n,[e])}for(var Pr=0;Pr<_r.length;Pr++){var Tr=_r[Pr];zr(Tr.toLowerCase(),"on"+(Tr[0].toUpperCase()+Tr.slice(1)))}zr(wr,"onAnimationEnd"),zr(Sr,"onAnimationIteration"),zr(Ir,"onAnimationStart"),zr("dblclick","onDoubleClick"),zr("focusin","onFocus"),zr("focusout","onBlur"),zr(Nr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Mr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,a,i,l,s,u){if(Ue.apply(this,arguments),Le){if(!Le)throw Error(o(198));var c=Me;Le=!1,Me=null,Oe||(Oe=!0,Fe=c)}}(r,n,void 0,e),e.currentTarget=null}function Or(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],a=r.event;r=r.listeners;e:{var o=void 0;if(n)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;Mr(a,l,u),o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;Mr(a,l,u),o=s}}}if(Oe)throw e=Fe,Oe=!1,Fe=null,e}function Fr(e,n){var t=n[ha];void 0===t&&(t=n[ha]=new Set);var r=e+"__bubble";t.has(r)||(Wr(n,e,2,!1),t.add(r))}function Dr(e,n,t){var r=0;n&&(r|=4),Wr(t,e,r,n)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function qr(e){if(!e[Ur]){e[Ur]=!0,i.forEach((function(n){"selectionchange"!==n&&(Lr.has(n)||Dr(n,!1,e),Dr(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Ur]||(n[Ur]=!0,Dr("selectionchange",!1,n))}}function Wr(e,n,t,r){switch(Zn(n)){case 1:var a=Hn;break;case 4:a=$n;break;default:a=Yn}t=a.bind(null,n,t,e),a=void 0,!Pe||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(a=!0),r?void 0!==a?e.addEventListener(n,t,{capture:!0,passive:a}):e.addEventListener(n,t,!0):void 0!==a?e.addEventListener(n,t,{passive:a}):e.addEventListener(n,t,!1)}function Vr(e,n,t,r,a){var o=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=va(l)))return;if(5===(s=i.tag)||6===s){r=o=i;continue e}l=l.parentNode}}r=r.return}_e((function(){var r=o,a=xe(t),i=[];e:{var l=jr.get(e);if(void 0!==l){var s=ct,u=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":s=St;break;case"focusin":u="focus",s=At;break;case"focusout":u="blur",s=At;break;case"beforeblur":case"afterblur":s=At;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=ht;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Nt;break;case wr:case Sr:case Ir:s=gt;break;case Nr:s=jt;break;case"scroll":s=ft;break;case"wheel":s=zt;break;case"copy":case"cut":case"paste":s=bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=It}var c=!!(4&n),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==f&&null!=(h=ze(m,f))&&c.push(Qr(m,h,p))),d)break;m=m.return}0<c.length&&(l=new s(l,u,null,t,a),i.push({event:l,listeners:c}))}}if(!(7&n)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||t===ye||!(u=t.relatedTarget||t.fromElement)||!va(u)&&!u[ma])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=t.relatedTarget||t.toElement)?va(u):null)&&(u!==(d=qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=mt,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=It,h="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==s?l:ya(s),p=null==u?l:ya(u),(l=new c(h,m+"leave",s,t,a)).target=d,l.relatedTarget=p,h=null,va(a)===r&&((c=new c(f,m+"enter",u,t,a)).target=p,c.relatedTarget=d,h=c),d=h,s&&u)e:{for(f=u,m=0,p=c=s;p;p=$r(p))m++;for(p=0,h=f;h;h=$r(h))p++;for(;0<m-p;)c=$r(c),m--;for(;0<p-m;)f=$r(f),p--;for(;m--;){if(c===f||null!==f&&c===f.alternate)break e;c=$r(c),f=$r(f)}c=null}else c=null;null!==s&&Yr(i,l,s,c,!1),null!==u&&null!==d&&Yr(i,d,u,c,!0)}if("select"===(s=(l=r?ya(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var A=Kt;else if(Vt(l))if(Zt)A=ir;else{A=ar;var g=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(A=or);switch(A&&(A=A(e,r))?Qt(i,A,t,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ee(l,"number",l.value)),g=r?ya(r):window,e){case"focusin":(Vt(g)||"true"===g.contentEditable)&&(Ar=g,gr=r,vr=null);break;case"focusout":vr=gr=Ar=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,yr(i,t,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":yr(i,t,a)}var v;if(Tt)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else qt?Dt(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(Mt&&"ko"!==t.locale&&(qt||"onCompositionStart"!==b?"onCompositionEnd"===b&&qt&&(v=nt()):(Jn="value"in(Gn=a)?Gn.value:Gn.textContent,qt=!0)),0<(g=Hr(r,b)).length&&(b=new yt(b,e,null,t,a),i.push({event:b,listeners:g}),(v||null!==(v=Ut(t)))&&(b.data=v))),(v=Lt?function(e,n){switch(e){case"compositionend":return Ut(n);case"keypress":return 32!==n.which?null:(Ft=!0,Ot);case"textInput":return(e=n.data)===Ot&&Ft?null:e;default:return null}}(e,t):function(e,n){if(qt)return"compositionend"===e||!Tt&&Dt(e,n)?(e=nt(),et=Jn=Gn=null,qt=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Mt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Hr(r,"onBeforeInput")).length&&(a=new yt("onBeforeInput","beforeinput",null,t,a),i.push({event:a,listeners:r}),a.data=v)}Or(i,n)}))}function Qr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Hr(e,n){for(var t=n+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=ze(e,t))&&r.unshift(Qr(e,o,a)),null!=(o=ze(e,n))&&r.push(Qr(e,o,a))),e=e.return}return r}function $r(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,n,t,r,a){for(var o=n._reactName,i=[];null!==t&&t!==r;){var l=t,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=ze(t,o))&&i.unshift(Qr(t,s,l)):a||null!=(s=ze(t,o))&&i.push(Qr(t,s,l))),t=t.return}0!==i.length&&e.push({event:n,listeners:i})}var Xr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Zr(e){return("string"==typeof e?e:""+e).replace(Xr,"\n").replace(Kr,"")}function Gr(e,n,t){if(n=Zr(n),Zr(e)!==n&&t)throw Error(o(425))}function Jr(){}var ea=null,na=null;function ta(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function sa(e,n){var t=n,r=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if("/$"===(t=a.data)){if(0===r)return e.removeChild(a),void Wn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=a}while(t);Wn(n)}function ua(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function ca(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ma="__reactContainer$"+da,ha="__reactEvents$"+da,Aa="__reactListeners$"+da,ga="__reactHandles$"+da;function va(e){var n=e[fa];if(n)return n;for(var t=e.parentNode;t;){if(n=t[ma]||t[fa]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=ca(e);null!==e;){if(t=e[fa])return t;e=ca(e)}return n}t=(e=t).parentNode}return null}function ba(e){return!(e=e[fa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ya(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function xa(e){return e[pa]||null}var Ca=[],Ba=-1;function Ea(e){return{current:e}}function ka(e){0>Ba||(e.current=Ca[Ba],Ca[Ba]=null,Ba--)}function wa(e,n){Ba++,Ca[Ba]=e.current,e.current=n}var Sa={},Ia=Ea(Sa),Na=Ea(!1),ja=Sa;function _a(e,n){var t=e.type.contextTypes;if(!t)return Sa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in t)o[a]=n[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=o),o}function za(e){return null!=e.childContextTypes}function Pa(){ka(Na),ka(Ia)}function Ta(e,n,t){if(Ia.current!==Sa)throw Error(o(168));wa(Ia,n),wa(Na,t)}function Ra(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())if(!(a in n))throw Error(o(108,W(e)||"Unknown",a));return M({},t,r)}function La(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Sa,ja=Ia.current,wa(Ia,e),wa(Na,Na.current),!0}function Ma(e,n,t){var r=e.stateNode;if(!r)throw Error(o(169));t?(e=Ra(e,n,ja),r.__reactInternalMemoizedMergedChildContext=e,ka(Na),ka(Ia),wa(Ia,e)):ka(Na),wa(Na,t)}var Oa=null,Fa=!1,Da=!1;function Ua(e){null===Oa?Oa=[e]:Oa.push(e)}function qa(){if(!Da&&null!==Oa){Da=!0;var e=0,n=yn;try{var t=Oa;for(yn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Oa=null,Fa=!1}catch(n){throw null!==Oa&&(Oa=Oa.slice(e+1)),$e(Je,qa),n}finally{yn=n,Da=!1}}return null}var Wa=[],Va=0,Qa=null,Ha=0,$a=[],Ya=0,Xa=null,Ka=1,Za="";function Ga(e,n){Wa[Va++]=Ha,Wa[Va++]=Qa,Qa=e,Ha=n}function Ja(e,n,t){$a[Ya++]=Ka,$a[Ya++]=Za,$a[Ya++]=Xa,Xa=e;var r=Ka;e=Za;var a=32-ln(r)-1;r&=~(1<<a),t+=1;var o=32-ln(n)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ka=1<<32-ln(n)+a|t<<a|r,Za=o+e}else Ka=1<<o|t<<a|r,Za=e}function eo(e){null!==e.return&&(Ga(e,1),Ja(e,1,0))}function no(e){for(;e===Qa;)Qa=Wa[--Va],Wa[Va]=null,Ha=Wa[--Va],Wa[Va]=null;for(;e===Xa;)Xa=$a[--Ya],$a[Ya]=null,Za=$a[--Ya],$a[Ya]=null,Ka=$a[--Ya],$a[Ya]=null}var to=null,ro=null,ao=!1,oo=null;function io(e,n){var t=_u(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function lo(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,to=e,ro=ua(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,to=e,ro=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Xa?{id:Ka,overflow:Za}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=_u(18,null,null,0)).stateNode=n,t.return=e,e.child=t,to=e,ro=null,!0);default:return!1}}function so(e){return!(!(1&e.mode)||128&e.flags)}function uo(e){if(ao){var n=ro;if(n){var t=n;if(!lo(e,n)){if(so(e))throw Error(o(418));n=ua(t.nextSibling);var r=to;n&&lo(e,n)?io(r,t):(e.flags=-4097&e.flags|2,ao=!1,to=e)}}else{if(so(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,to=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;to=e}function fo(e){if(e!==to)return!1;if(!ao)return co(e),ao=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!ta(e.type,e.memoizedProps)),n&&(n=ro)){if(so(e))throw po(),Error(o(418));for(;n;)io(e,n),n=ua(n.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ro=ua(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ro=null}}else ro=to?ua(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=ua(e.nextSibling)}function mo(){ro=to=null,ao=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var Ao=y.ReactCurrentBatchConfig;function go(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(o(309));var r=t.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===i?n.ref:(n=function(e){var n=a.refs;null===e?delete n[i]:n[i]=e},n._stringRef=i,n)}if("string"!=typeof e)throw Error(o(284));if(!t._owner)throw Error(o(290,e))}return e}function vo(e,n){throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function yo(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function a(e,n){return(e=Pu(e,n)).index=0,e.sibling=null,e}function i(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function l(n){return e&&null===n.alternate&&(n.flags|=2),n}function s(e,n,t,r){return null===n||6!==n.tag?((n=Mu(t,e.mode,r)).return=e,n):((n=a(n,t)).return=e,n)}function u(e,n,t,r){var o=t.type;return o===B?d(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===z&&bo(o)===n.type)?((r=a(n,t.props)).ref=go(e,n,t),r.return=e,r):((r=Tu(t.type,t.key,t.props,null,e.mode,r)).ref=go(e,n,t),r.return=e,r)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Ou(t,e.mode,r)).return=e,n):((n=a(n,t.children||[])).return=e,n)}function d(e,n,t,r,o){return null===n||7!==n.tag?((n=Ru(t,e.mode,r,o)).return=e,n):((n=a(n,t)).return=e,n)}function f(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Mu(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return(t=Tu(n.type,n.key,n.props,null,e.mode,t)).ref=go(e,null,n),t.return=e,t;case C:return(n=Ou(n,e.mode,t)).return=e,n;case z:return f(e,(0,n._init)(n._payload),t)}if(ne(n)||R(n))return(n=Ru(n,e.mode,t,null)).return=e,n;vo(e,n)}return null}function p(e,n,t,r){var a=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==a?null:s(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return t.key===a?u(e,n,t,r):null;case C:return t.key===a?c(e,n,t,r):null;case z:return p(e,n,(a=t._init)(t._payload),r)}if(ne(t)||R(t))return null!==a?null:d(e,n,t,r,null);vo(e,t)}return null}function m(e,n,t,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(n,e=e.get(t)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return u(n,e=e.get(null===r.key?t:r.key)||null,r,a);case C:return c(n,e=e.get(null===r.key?t:r.key)||null,r,a);case z:return m(e,n,t,(0,r._init)(r._payload),a)}if(ne(r)||R(r))return d(n,e=e.get(t)||null,r,a,null);vo(n,r)}return null}function h(a,o,l,s){for(var u=null,c=null,d=o,h=o=0,A=null;null!==d&&h<l.length;h++){d.index>h?(A=d,d=null):A=d.sibling;var g=p(a,d,l[h],s);if(null===g){null===d&&(d=A);break}e&&d&&null===g.alternate&&n(a,d),o=i(g,o,h),null===c?u=g:c.sibling=g,c=g,d=A}if(h===l.length)return t(a,d),ao&&Ga(a,h),u;if(null===d){for(;h<l.length;h++)null!==(d=f(a,l[h],s))&&(o=i(d,o,h),null===c?u=d:c.sibling=d,c=d);return ao&&Ga(a,h),u}for(d=r(a,d);h<l.length;h++)null!==(A=m(d,a,h,l[h],s))&&(e&&null!==A.alternate&&d.delete(null===A.key?h:A.key),o=i(A,o,h),null===c?u=A:c.sibling=A,c=A);return e&&d.forEach((function(e){return n(a,e)})),ao&&Ga(a,h),u}function A(a,l,s,u){var c=R(s);if("function"!=typeof c)throw Error(o(150));if(null==(s=c.call(s)))throw Error(o(151));for(var d=c=null,h=l,A=l=0,g=null,v=s.next();null!==h&&!v.done;A++,v=s.next()){h.index>A?(g=h,h=null):g=h.sibling;var b=p(a,h,v.value,u);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&n(a,h),l=i(b,l,A),null===d?c=b:d.sibling=b,d=b,h=g}if(v.done)return t(a,h),ao&&Ga(a,A),c;if(null===h){for(;!v.done;A++,v=s.next())null!==(v=f(a,v.value,u))&&(l=i(v,l,A),null===d?c=v:d.sibling=v,d=v);return ao&&Ga(a,A),c}for(h=r(a,h);!v.done;A++,v=s.next())null!==(v=m(h,a,A,v.value,u))&&(e&&null!==v.alternate&&h.delete(null===v.key?A:v.key),l=i(v,l,A),null===d?c=v:d.sibling=v,d=v);return e&&h.forEach((function(e){return n(a,e)})),ao&&Ga(a,A),c}return function e(r,o,i,s){if("object"==typeof i&&null!==i&&i.type===B&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var u=i.key,c=o;null!==c;){if(c.key===u){if((u=i.type)===B){if(7===c.tag){t(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===z&&bo(u)===c.type){t(r,c.sibling),(o=a(c,i.props)).ref=go(r,c,i),o.return=r,r=o;break e}t(r,c);break}n(r,c),c=c.sibling}i.type===B?((o=Ru(i.props.children,r.mode,s,i.key)).return=r,r=o):((s=Tu(i.type,i.key,i.props,null,r.mode,s)).ref=go(r,o,i),s.return=r,r=s)}return l(r);case C:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){t(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}t(r,o);break}n(r,o),o=o.sibling}(o=Ou(i,r.mode,s)).return=r,r=o}return l(r);case z:return e(r,o,(c=i._init)(i._payload),s)}if(ne(i))return h(r,o,i,s);if(R(i))return A(r,o,i,s);vo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(t(r,o.sibling),(o=a(o,i)).return=r,r=o):(t(r,o),(o=Mu(i,r.mode,s)).return=r,r=o),l(r)):t(r,o)}}var xo=yo(!0),Co=yo(!1),Bo=Ea(null),Eo=null,ko=null,wo=null;function So(){wo=ko=Eo=null}function Io(e){var n=Bo.current;ka(Bo),e._currentValue=n}function No(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function jo(e,n){Eo=e,wo=ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&n)&&(bl=!0),e.firstContext=null)}function _o(e){var n=e._currentValue;if(wo!==e)if(e={context:e,memoizedValue:n,next:null},null===ko){if(null===Eo)throw Error(o(308));ko=e,Eo.dependencies={lanes:0,firstContext:e}}else ko=ko.next=e;return n}var zo=null;function Po(e){null===zo?zo=[e]:zo.push(e)}function To(e,n,t,r){var a=n.interleaved;return null===a?(t.next=t,Po(n)):(t.next=a.next,a.next=t),n.interleaved=t,Ro(e,r)}function Ro(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Lo=!1;function Mo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Oo(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Fo(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Do(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Is){var a=r.pending;return null===a?n.next=n:(n.next=a.next,a.next=n),r.pending=n,Ro(e,t)}return null===(a=r.interleaved)?(n.next=n,Po(r)):(n.next=a.next,a.next=n),r.interleaved=n,Ro(e,t)}function Uo(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}function qo(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var a=null,o=null;if(null!==(t=t.firstBaseUpdate)){do{var i={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===o?a=o=i:o=o.next=i,t=t.next}while(null!==t);null===o?a=o=n:o=o.next=n}else a=o=n;return t={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Wo(e,n,t,r){var a=e.updateQueue;Lo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?o=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==o){var d=a.baseState;for(i=0,c=u=s=null,l=o;;){var f=l.lane,p=l.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(f=n,p=t,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,f);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(f="function"==typeof(m=h.payload)?m.call(p,d,f):m))break e;d=M({},d,f);break e;case 2:Lo=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(f=l).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(s=d),a.baseState=s,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(n=a.shared.interleaved)){a=n;do{i|=a.lane,a=a.next}while(a!==n)}else null===o&&(a.shared.lanes=0);Ls|=i,e.lanes=i,e.memoizedState=d}}function Vo(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],a=r.callback;if(null!==a){if(r.callback=null,r=t,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Qo={},Ho=Ea(Qo),$o=Ea(Qo),Yo=Ea(Qo);function Xo(e){if(e===Qo)throw Error(o(174));return e}function Ko(e,n){switch(wa(Yo,n),wa($o,e),wa(Ho,Qo),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:se(null,"");break;default:n=se(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}ka(Ho),wa(Ho,n)}function Zo(){ka(Ho),ka($o),ka(Yo)}function Go(e){Xo(Yo.current);var n=Xo(Ho.current),t=se(n,e.type);n!==t&&(wa($o,e),wa(Ho,t))}function Jo(e){$o.current===e&&(ka(Ho),ka($o))}var ei=Ea(0);function ni(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ti=[];function ri(){for(var e=0;e<ti.length;e++)ti[e]._workInProgressVersionPrimary=null;ti.length=0}var ai=y.ReactCurrentDispatcher,oi=y.ReactCurrentBatchConfig,ii=0,li=null,si=null,ui=null,ci=!1,di=!1,fi=0,pi=0;function mi(){throw Error(o(321))}function hi(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!lr(e[t],n[t]))return!1;return!0}function Ai(e,n,t,r,a,i){if(ii=i,li=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,ai.current=null===e||null===e.memoizedState?Ji:el,e=t(r,a),di){i=0;do{if(di=!1,fi=0,25<=i)throw Error(o(301));i+=1,ui=si=null,n.updateQueue=null,ai.current=nl,e=t(r,a)}while(di)}if(ai.current=Gi,n=null!==si&&null!==si.next,ii=0,ui=si=li=null,ci=!1,n)throw Error(o(300));return e}function gi(){var e=0!==fi;return fi=0,e}function vi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ui?li.memoizedState=ui=e:ui=ui.next=e,ui}function bi(){if(null===si){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=si.next;var n=null===ui?li.memoizedState:ui.next;if(null!==n)ui=n,si=e;else{if(null===e)throw Error(o(310));e={memoizedState:(si=e).memoizedState,baseState:si.baseState,baseQueue:si.baseQueue,queue:si.queue,next:null},null===ui?li.memoizedState=ui=e:ui=ui.next=e}return ui}function yi(e,n){return"function"==typeof n?n(e):n}function xi(e){var n=bi(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=si,a=r.baseQueue,i=t.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,t.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=l=null,u=null,c=i;do{var d=c.lane;if((ii&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=f,l=r):u=u.next=f,li.lanes|=d,Ls|=d}c=c.next}while(null!==c&&c!==i);null===u?l=r:u.next=s,lr(r,n.memoizedState)||(bl=!0),n.memoizedState=r,n.baseState=l,n.baseQueue=u,t.lastRenderedState=r}if(null!==(e=t.interleaved)){a=e;do{i=a.lane,li.lanes|=i,Ls|=i,a=a.next}while(a!==e)}else null===a&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Ci(e){var n=bi(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=t.dispatch,a=t.pending,i=n.memoizedState;if(null!==a){t.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,n.memoizedState)||(bl=!0),n.memoizedState=i,null===n.baseQueue&&(n.baseState=i),t.lastRenderedState=i}return[i,r]}function Bi(){}function Ei(e,n){var t=li,r=bi(),a=n(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,bl=!0),r=r.queue,Li(Si.bind(null,t,r,e),[e]),r.getSnapshot!==n||i||null!==ui&&1&ui.memoizedState.tag){if(t.flags|=2048,_i(9,wi.bind(null,t,r,a,n),void 0,null),null===Ns)throw Error(o(349));30&ii||ki(t,n,a)}return a}function ki(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=li.updateQueue)?(n={lastEffect:null,stores:null},li.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function wi(e,n,t,r){n.value=t,n.getSnapshot=r,Ii(n)&&Ni(e)}function Si(e,n,t){return t((function(){Ii(n)&&Ni(e)}))}function Ii(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!lr(e,t)}catch(e){return!0}}function Ni(e){var n=Ro(e,1);null!==n&&tu(n,e,1,-1)}function ji(e){var n=vi();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:yi,lastRenderedState:e},n.queue=e,e=e.dispatch=Yi.bind(null,li,e),[n.memoizedState,e]}function _i(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=li.updateQueue)?(n={lastEffect:null,stores:null},li.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function zi(){return bi().memoizedState}function Pi(e,n,t,r){var a=vi();li.flags|=e,a.memoizedState=_i(1|n,t,void 0,void 0===r?null:r)}function Ti(e,n,t,r){var a=bi();r=void 0===r?null:r;var o=void 0;if(null!==si){var i=si.memoizedState;if(o=i.destroy,null!==r&&hi(r,i.deps))return void(a.memoizedState=_i(n,t,o,r))}li.flags|=e,a.memoizedState=_i(1|n,t,o,r)}function Ri(e,n){return Pi(8390656,8,e,n)}function Li(e,n){return Ti(2048,8,e,n)}function Mi(e,n){return Ti(4,2,e,n)}function Oi(e,n){return Ti(4,4,e,n)}function Fi(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Di(e,n,t){return t=null!=t?t.concat([e]):null,Ti(4,4,Fi.bind(null,n,e),t)}function Ui(){}function qi(e,n){var t=bi();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&hi(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Wi(e,n){var t=bi();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&hi(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Vi(e,n,t){return 21&ii?(lr(t,n)||(t=An(),li.lanes|=t,Ls|=t,e.baseState=!0),n):(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=t)}function Qi(e,n){var t=yn;yn=0!==t&&4>t?t:4,e(!0);var r=oi.transition;oi.transition={};try{e(!1),n()}finally{yn=t,oi.transition=r}}function Hi(){return bi().memoizedState}function $i(e,n,t){var r=nu(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},Xi(e)?Ki(n,t):null!==(t=To(e,n,t,r))&&(tu(t,e,r,eu()),Zi(t,n,r))}function Yi(e,n,t){var r=nu(e),a={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(Xi(e))Ki(n,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=n.lastRenderedReducer))try{var i=n.lastRenderedState,l=o(i,t);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var s=n.interleaved;return null===s?(a.next=a,Po(n)):(a.next=s.next,s.next=a),void(n.interleaved=a)}}catch(e){}null!==(t=To(e,n,a,r))&&(tu(t,e,r,a=eu()),Zi(t,n,r))}}function Xi(e){var n=e.alternate;return e===li||null!==n&&n===li}function Ki(e,n){di=ci=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function Zi(e,n,t){if(4194240&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}var Gi={readContext:_o,useCallback:mi,useContext:mi,useEffect:mi,useImperativeHandle:mi,useInsertionEffect:mi,useLayoutEffect:mi,useMemo:mi,useReducer:mi,useRef:mi,useState:mi,useDebugValue:mi,useDeferredValue:mi,useTransition:mi,useMutableSource:mi,useSyncExternalStore:mi,useId:mi,unstable_isNewReconciler:!1},Ji={readContext:_o,useCallback:function(e,n){return vi().memoizedState=[e,void 0===n?null:n],e},useContext:_o,useEffect:Ri,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,Pi(4194308,4,Fi.bind(null,n,e),t)},useLayoutEffect:function(e,n){return Pi(4194308,4,e,n)},useInsertionEffect:function(e,n){return Pi(4,2,e,n)},useMemo:function(e,n){var t=vi();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=vi();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=$i.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vi().memoizedState=e},useState:ji,useDebugValue:Ui,useDeferredValue:function(e){return vi().memoizedState=e},useTransition:function(){var e=ji(!1),n=e[0];return e=Qi.bind(null,e[1]),vi().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=li,a=vi();if(ao){if(void 0===t)throw Error(o(407));t=t()}else{if(t=n(),null===Ns)throw Error(o(349));30&ii||ki(r,n,t)}a.memoizedState=t;var i={value:t,getSnapshot:n};return a.queue=i,Ri(Si.bind(null,r,i,e),[e]),r.flags|=2048,_i(9,wi.bind(null,r,i,t,n),void 0,null),t},useId:function(){var e=vi(),n=Ns.identifierPrefix;if(ao){var t=Za;n=":"+n+"R"+(t=(Ka&~(1<<32-ln(Ka)-1)).toString(32)+t),0<(t=fi++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=pi++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},el={readContext:_o,useCallback:qi,useContext:_o,useEffect:Li,useImperativeHandle:Di,useInsertionEffect:Mi,useLayoutEffect:Oi,useMemo:Wi,useReducer:xi,useRef:zi,useState:function(){return xi(yi)},useDebugValue:Ui,useDeferredValue:function(e){return Vi(bi(),si.memoizedState,e)},useTransition:function(){return[xi(yi)[0],bi().memoizedState]},useMutableSource:Bi,useSyncExternalStore:Ei,useId:Hi,unstable_isNewReconciler:!1},nl={readContext:_o,useCallback:qi,useContext:_o,useEffect:Li,useImperativeHandle:Di,useInsertionEffect:Mi,useLayoutEffect:Oi,useMemo:Wi,useReducer:Ci,useRef:zi,useState:function(){return Ci(yi)},useDebugValue:Ui,useDeferredValue:function(e){var n=bi();return null===si?n.memoizedState=e:Vi(n,si.memoizedState,e)},useTransition:function(){return[Ci(yi)[0],bi().memoizedState]},useMutableSource:Bi,useSyncExternalStore:Ei,useId:Hi,unstable_isNewReconciler:!1};function tl(e,n){if(e&&e.defaultProps){for(var t in n=M({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}function rl(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:M({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var al={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=eu(),a=nu(e),o=Fo(r,a);o.payload=n,null!=t&&(o.callback=t),null!==(n=Do(e,o,a))&&(tu(n,e,a,r),Uo(n,e,a))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=eu(),a=nu(e),o=Fo(r,a);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=Do(e,o,a))&&(tu(n,e,a,r),Uo(n,e,a))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=eu(),r=nu(e),a=Fo(t,r);a.tag=2,null!=n&&(a.callback=n),null!==(n=Do(e,a,r))&&(tu(n,e,r,t),Uo(n,e,r))}};function ol(e,n,t,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(n.prototype&&n.prototype.isPureReactComponent&&sr(t,r)&&sr(a,o))}function il(e,n,t){var r=!1,a=Sa,o=n.contextType;return"object"==typeof o&&null!==o?o=_o(o):(a=za(n)?ja:Ia.current,o=(r=null!=(r=n.contextTypes))?_a(e,a):Sa),n=new n(t,o),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=al,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),n}function ll(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&al.enqueueReplaceState(n,n.state,null)}function sl(e,n,t,r){var a=e.stateNode;a.props=t,a.state=e.memoizedState,a.refs={},Mo(e);var o=n.contextType;"object"==typeof o&&null!==o?a.context=_o(o):(o=za(n)?ja:Ia.current,a.context=_a(e,o)),a.state=e.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(rl(e,n,o,t),a.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(n=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),n!==a.state&&al.enqueueReplaceState(a,a.state,null),Wo(e,t,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function ul(e,n){try{var t="",r=n;do{t+=U(r),r=r.return}while(r);var a=t}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:a,digest:null}}function cl(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function dl(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var fl="function"==typeof WeakMap?WeakMap:Map;function pl(e,n,t){(t=Fo(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Vs||(Vs=!0,Qs=r),dl(0,n)},t}function ml(e,n,t){(t=Fo(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=n.value;t.payload=function(){return r(a)},t.callback=function(){dl(0,n)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(t.callback=function(){dl(0,n),"function"!=typeof r&&(null===Hs?Hs=new Set([this]):Hs.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function hl(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(n,a)}else void 0===(a=r.get(n))&&(a=new Set,r.set(n,a));a.has(t)||(a.add(t),e=ku.bind(null,e,n,t),n.then(e,e))}function Al(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function gl(e,n,t,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Fo(-1,1)).tag=2,Do(t,n,1))),t.lanes|=1),e)}var vl=y.ReactCurrentOwner,bl=!1;function yl(e,n,t,r){n.child=null===e?Co(n,null,t,r):xo(n,e.child,t,r)}function xl(e,n,t,r,a){t=t.render;var o=n.ref;return jo(n,a),r=Ai(e,n,t,r,o,a),t=gi(),null===e||bl?(ao&&t&&eo(n),n.flags|=1,yl(e,n,r,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Vl(e,n,a))}function Cl(e,n,t,r,a){if(null===e){var o=t.type;return"function"!=typeof o||zu(o)||void 0!==o.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Tu(t.type,null,r,n,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=o,Bl(e,n,o,r,a))}if(o=e.child,!(e.lanes&a)){var i=o.memoizedProps;if((t=null!==(t=t.compare)?t:sr)(i,r)&&e.ref===n.ref)return Vl(e,n,a)}return n.flags|=1,(e=Pu(o,r)).ref=n.ref,e.return=n,n.child=e}function Bl(e,n,t,r,a){if(null!==e){var o=e.memoizedProps;if(sr(o,r)&&e.ref===n.ref){if(bl=!1,n.pendingProps=r=o,!(e.lanes&a))return n.lanes=e.lanes,Vl(e,n,a);131072&e.flags&&(bl=!0)}}return wl(e,n,t,r,a)}function El(e,n,t){var r=n.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&n.mode){if(!(1073741824&t))return e=null!==o?o.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,wa(Ps,zs),zs|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:t,wa(Ps,zs),zs|=r}else n.memoizedState={baseLanes:0,cachePool:null,transitions:null},wa(Ps,zs),zs|=t;else null!==o?(r=o.baseLanes|t,n.memoizedState=null):r=t,wa(Ps,zs),zs|=r;return yl(e,n,a,t),n.child}function kl(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function wl(e,n,t,r,a){var o=za(t)?ja:Ia.current;return o=_a(n,o),jo(n,a),t=Ai(e,n,t,r,o,a),r=gi(),null===e||bl?(ao&&r&&eo(n),n.flags|=1,yl(e,n,t,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Vl(e,n,a))}function Sl(e,n,t,r,a){if(za(t)){var o=!0;La(n)}else o=!1;if(jo(n,a),null===n.stateNode)Wl(e,n),il(n,t,r),sl(n,t,r,a),r=!0;else if(null===e){var i=n.stateNode,l=n.memoizedProps;i.props=l;var s=i.context,u=t.contextType;u="object"==typeof u&&null!==u?_o(u):_a(n,u=za(t)?ja:Ia.current);var c=t.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&ll(n,i,r,u),Lo=!1;var f=n.memoizedState;i.state=f,Wo(n,r,i,a),s=n.memoizedState,l!==r||f!==s||Na.current||Lo?("function"==typeof c&&(rl(n,t,c,r),s=n.memoizedState),(l=Lo||ol(n,t,l,r,f,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(n.flags|=4194308)):("function"==typeof i.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(n.flags|=4194308),r=!1)}else{i=n.stateNode,Oo(e,n),l=n.memoizedProps,u=n.type===n.elementType?l:tl(n.type,l),i.props=u,d=n.pendingProps,f=i.context,s="object"==typeof(s=t.contextType)&&null!==s?_o(s):_a(n,s=za(t)?ja:Ia.current);var p=t.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==s)&&ll(n,i,r,s),Lo=!1,f=n.memoizedState,i.state=f,Wo(n,r,i,a);var m=n.memoizedState;l!==d||f!==m||Na.current||Lo?("function"==typeof p&&(rl(n,t,p,r),m=n.memoizedState),(u=Lo||ol(n,t,u,r,f,m,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,s)),"function"==typeof i.componentDidUpdate&&(n.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=m),i.props=r,i.state=m,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=1024),r=!1)}return Il(e,n,t,r,o,a)}function Il(e,n,t,r,a,o){kl(e,n);var i=!!(128&n.flags);if(!r&&!i)return a&&Ma(n,t,!1),Vl(e,n,o);r=n.stateNode,vl.current=n;var l=i&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&i?(n.child=xo(n,e.child,null,o),n.child=xo(n,null,l,o)):yl(e,n,l,o),n.memoizedState=r.state,a&&Ma(n,t,!0),n.child}function Nl(e){var n=e.stateNode;n.pendingContext?Ta(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Ta(0,n.context,!1),Ko(e,n.containerInfo)}function jl(e,n,t,r,a){return mo(),ho(a),n.flags|=256,yl(e,n,t,r),n.child}var _l,zl,Pl,Tl,Rl={dehydrated:null,treeContext:null,retryLane:0};function Ll(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ml(e,n,t){var r,a=n.pendingProps,i=ei.current,l=!1,s=!!(128&n.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),wa(ei,1&i),null===e)return uo(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(1&n.mode?"$!"===e.data?n.lanes=8:n.lanes=1073741824:n.lanes=1,null):(s=a.children,e=a.fallback,l?(a=n.mode,l=n.child,s={mode:"hidden",children:s},1&a||null===l?l=Lu(s,a,0,null):(l.childLanes=0,l.pendingProps=s),e=Ru(e,a,t,null),l.return=n,e.return=n,l.sibling=e,n.child=l,n.child.memoizedState=Ll(t),n.memoizedState=Rl,e):Ol(n,s));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,n,t,r,a,i,l){if(t)return 256&n.flags?(n.flags&=-257,Fl(e,n,l,r=cl(Error(o(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(i=r.fallback,a=n.mode,r=Lu({mode:"visible",children:r.children},a,0,null),(i=Ru(i,a,l,null)).flags|=2,r.return=n,i.return=n,r.sibling=i,n.child=r,1&n.mode&&xo(n,e.child,null,l),n.child.memoizedState=Ll(l),n.memoizedState=Rl,i);if(!(1&n.mode))return Fl(e,n,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var s=r.dgst;return r=s,Fl(e,n,l,r=cl(i=Error(o(419)),r,void 0))}if(s=!!(l&e.childLanes),bl||s){if(null!==(r=Ns)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|l)?0:a)&&a!==i.retryLane&&(i.retryLane=a,Ro(e,a),tu(r,e,a,-1))}return hu(),Fl(e,n,l,r=cl(Error(o(421))))}return"$?"===a.data?(n.flags|=128,n.child=e.child,n=Su.bind(null,e),a._reactRetry=n,null):(e=i.treeContext,ro=ua(a.nextSibling),to=n,ao=!0,oo=null,null!==e&&($a[Ya++]=Ka,$a[Ya++]=Za,$a[Ya++]=Xa,Ka=e.id,Za=e.overflow,Xa=n),(n=Ol(n,r.children)).flags|=4096,n)}(e,n,s,a,r,i,t);if(l){l=a.fallback,s=n.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:a.children};return 1&s||n.child===i?(a=Pu(i,u)).subtreeFlags=14680064&i.subtreeFlags:((a=n.child).childLanes=0,a.pendingProps=u,n.deletions=null),null!==r?l=Pu(r,l):(l=Ru(l,s,t,null)).flags|=2,l.return=n,a.return=n,a.sibling=l,n.child=a,a=l,l=n.child,s=null===(s=e.child.memoizedState)?Ll(t):{baseLanes:s.baseLanes|t,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~t,n.memoizedState=Rl,a}return e=(l=e.child).sibling,a=Pu(l,{mode:"visible",children:a.children}),!(1&n.mode)&&(a.lanes=t),a.return=n,a.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=a,n.memoizedState=null,a}function Ol(e,n){return(n=Lu({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Fl(e,n,t,r){return null!==r&&ho(r),xo(n,e.child,null,t),(e=Ol(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Dl(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),No(e.return,n,t)}function Ul(e,n,t,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:a}:(o.isBackwards=n,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=t,o.tailMode=a)}function ql(e,n,t){var r=n.pendingProps,a=r.revealOrder,o=r.tail;if(yl(e,n,r.children,t),2&(r=ei.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Dl(e,t,n);else if(19===e.tag)Dl(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(wa(ei,r),1&n.mode)switch(a){case"forwards":for(t=n.child,a=null;null!==t;)null!==(e=t.alternate)&&null===ni(e)&&(a=t),t=t.sibling;null===(t=a)?(a=n.child,n.child=null):(a=t.sibling,t.sibling=null),Ul(n,!1,a,t,o);break;case"backwards":for(t=null,a=n.child,n.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ni(e)){n.child=a;break}e=a.sibling,a.sibling=t,t=a,a=e}Ul(n,!0,t,null,o);break;case"together":Ul(n,!1,null,null,void 0);break;default:n.memoizedState=null}else n.memoizedState=null;return n.child}function Wl(e,n){!(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Vl(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Ls|=n.lanes,!(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(o(153));if(null!==n.child){for(t=Pu(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Pu(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Ql(e,n){if(!ao)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hl(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function $l(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hl(n),null;case 1:case 17:return za(n.type)&&Pa(),Hl(n),null;case 3:return r=n.stateNode,Zo(),ka(Na),ka(Ia),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,null!==oo&&(iu(oo),oo=null))),zl(e,n),Hl(n),null;case 5:Jo(n);var a=Xo(Yo.current);if(t=n.type,null!==e&&null!=n.stateNode)Pl(e,n,t,r,a),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(o(166));return Hl(n),null}if(e=Xo(Ho.current),fo(n)){r=n.stateNode,t=n.type;var i=n.memoizedProps;switch(r[fa]=n,r[pa]=i,e=!!(1&n.mode),t){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Rr.length;a++)Fr(Rr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":K(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":ae(r,i),Fr("invalid",r)}for(var s in ve(t,i),a=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Gr(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Gr(r.textContent,u,e),a=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&Fr("scroll",r)}switch(t){case"input":H(r),J(r,i,!0);break;case"textarea":H(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,n.updateQueue=r,null!==r&&(n.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(t,{is:r.is}):(e=s.createElement(t),"select"===t&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,t),e[fa]=n,e[pa]=r,_l(e,n,!1,!1),n.stateNode=e;e:{switch(s=be(t,r),t){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Rr.length;a++)Fr(Rr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":K(e,r),a=X(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(i in ve(t,a),u=a)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?Ae(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==t||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&b(e,i,c,s))}switch(t){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?te(e,!!r.multiple,i,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Hl(n),null;case 6:if(e&&null!=n.stateNode)Tl(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(o(166));if(t=Xo(Yo.current),Xo(Ho.current),fo(n)){if(r=n.stateNode,t=n.memoizedProps,r[fa]=n,(i=r.nodeValue!==t)&&null!==(e=to))switch(e.tag){case 3:Gr(r.nodeValue,t,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Gr(r.nodeValue,t,!!(1&e.mode))}i&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[fa]=n,n.stateNode=r}return Hl(n),null;case 13:if(ka(ei),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&n.mode&&!(128&n.flags))po(),mo(),n.flags|=98560,i=!1;else if(i=fo(n),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=n.memoizedState)?i.dehydrated:null))throw Error(o(317));i[fa]=n}else mo(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Hl(n),i=!1}else null!==oo&&(iu(oo),oo=null),i=!0;if(!i)return 65536&n.flags?n:null}return 128&n.flags?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,1&n.mode&&(null===e||1&ei.current?0===Ts&&(Ts=3):hu())),null!==n.updateQueue&&(n.flags|=4),Hl(n),null);case 4:return Zo(),zl(e,n),null===e&&qr(n.stateNode.containerInfo),Hl(n),null;case 10:return Io(n.type._context),Hl(n),null;case 19:if(ka(ei),null===(i=n.memoizedState))return Hl(n),null;if(r=!!(128&n.flags),null===(s=i.rendering))if(r)Ql(i,!1);else{if(0!==Ts||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(s=ni(e))){for(n.flags|=128,Ql(i,!1),null!==(r=s.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(i=t).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return wa(ei,1&ei.current|2),n.child}e=e.sibling}null!==i.tail&&Ze()>qs&&(n.flags|=128,r=!0,Ql(i,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=ni(s))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Ql(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!ao)return Hl(n),null}else 2*Ze()-i.renderingStartTime>qs&&1073741824!==t&&(n.flags|=128,r=!0,Ql(i,!1),n.lanes=4194304);i.isBackwards?(s.sibling=n.child,n.child=s):(null!==(t=i.last)?t.sibling=s:n.child=s,i.last=s)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.renderingStartTime=Ze(),n.sibling=null,t=ei.current,wa(ei,r?1&t|2:1&t),n):(Hl(n),null);case 22:case 23:return du(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&1&n.mode?!!(1073741824&zs)&&(Hl(n),6&n.subtreeFlags&&(n.flags|=8192)):Hl(n),null;case 24:case 25:return null}throw Error(o(156,n.tag))}function Yl(e,n){switch(no(n),n.tag){case 1:return za(n.type)&&Pa(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return Zo(),ka(Na),ka(Ia),ri(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 5:return Jo(n),null;case 13:if(ka(ei),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(o(340));mo()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return ka(ei),null;case 4:return Zo(),null;case 10:return Io(n.type._context),null;case 22:case 23:return du(),null;default:return null}}_l=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},zl=function(){},Pl=function(e,n,t,r){var a=e.memoizedProps;if(a!==r){e=n.stateNode,Xo(Ho.current);var o,i=null;switch(t){case"input":a=X(e,a),r=X(e,r),i=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(t,r),t=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var s=a[c];for(o in s)s.hasOwnProperty(o)&&(t||(t={}),t[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(o in s)!s.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(t||(t={}),t[o]="");for(o in u)u.hasOwnProperty(o)&&s[o]!==u[o]&&(t||(t={}),t[o]=u[o])}else t||(i||(i=[]),i.push(c,t)),t=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Fr("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}t&&(i=i||[]).push("style",t);var c=i;(n.updateQueue=c)&&(n.flags|=4)}},Tl=function(e,n,t,r){t!==r&&(n.flags|=4)};var Xl=!1,Kl=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Gl=null;function Jl(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Eu(e,n,t)}else t.current=null}function es(e,n,t){try{t()}catch(t){Eu(e,n,t)}}var ns=!1;function ts(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&es(n,t,o)}a=a.next}while(a!==r)}}function rs(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function as(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function os(e){var n=e.alternate;null!==n&&(e.alternate=null,os(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[fa],delete n[pa],delete n[ha],delete n[Aa],delete n[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function is(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||is(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ss(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ss(e,n,t),e=e.sibling;null!==e;)ss(e,n,t),e=e.sibling}function us(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(us(e,n,t),e=e.sibling;null!==e;)us(e,n,t),e=e.sibling}var cs=null,ds=!1;function fs(e,n,t){for(t=t.child;null!==t;)ps(e,n,t),t=t.sibling}function ps(e,n,t){if(on&&"function"==typeof on.onCommitFiberUnmount)try{on.onCommitFiberUnmount(an,t)}catch(e){}switch(t.tag){case 5:Kl||Jl(t,n);case 6:var r=cs,a=ds;cs=null,fs(e,n,t),ds=a,null!==(cs=r)&&(ds?(e=cs,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):cs.removeChild(t.stateNode));break;case 18:null!==cs&&(ds?(e=cs,t=t.stateNode,8===e.nodeType?sa(e.parentNode,t):1===e.nodeType&&sa(e,t),Wn(e)):sa(cs,t.stateNode));break;case 4:r=cs,a=ds,cs=t.stateNode.containerInfo,ds=!0,fs(e,n,t),cs=r,ds=a;break;case 0:case 11:case 14:case 15:if(!Kl&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(2&o||4&o)&&es(t,n,i),a=a.next}while(a!==r)}fs(e,n,t);break;case 1:if(!Kl&&(Jl(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){Eu(t,n,e)}fs(e,n,t);break;case 21:fs(e,n,t);break;case 22:1&t.mode?(Kl=(r=Kl)||null!==t.memoizedState,fs(e,n,t),Kl=r):fs(e,n,t);break;default:fs(e,n,t)}}function ms(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Zl),n.forEach((function(n){var r=Iu.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function hs(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var a=t[r];try{var i=e,l=n,s=l;e:for(;null!==s;){switch(s.tag){case 5:cs=s.stateNode,ds=!1;break e;case 3:case 4:cs=s.stateNode.containerInfo,ds=!0;break e}s=s.return}if(null===cs)throw Error(o(160));ps(i,l,a),cs=null,ds=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){Eu(a,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)As(n,e),n=n.sibling}function As(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hs(n,e),gs(e),4&r){try{ts(3,e,e.return),rs(3,e)}catch(n){Eu(e,e.return,n)}try{ts(5,e,e.return)}catch(n){Eu(e,e.return,n)}}break;case 1:hs(n,e),gs(e),512&r&&null!==t&&Jl(t,t.return);break;case 5:if(hs(n,e),gs(e),512&r&&null!==t&&Jl(t,t.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(n){Eu(e,e.return,n)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==t?t.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&Z(a,i),be(s,l);var c=be(s,i);for(l=0;l<u.length;l+=2){var d=u[l],f=u[l+1];"style"===d?Ae(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):b(a,d,f,c)}switch(s){case"input":G(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?te(a,!!i.multiple,m,!1):p!==!!i.multiple&&(null!=i.defaultValue?te(a,!!i.multiple,i.defaultValue,!0):te(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(n){Eu(e,e.return,n)}}break;case 6:if(hs(n,e),gs(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(n){Eu(e,e.return,n)}}break;case 3:if(hs(n,e),gs(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Wn(n.containerInfo)}catch(n){Eu(e,e.return,n)}break;case 4:default:hs(n,e),gs(e);break;case 13:hs(n,e),gs(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Us=Ze())),4&r&&ms(e);break;case 22:if(d=null!==t&&null!==t.memoizedState,1&e.mode?(Kl=(c=Kl)||d,hs(n,e),Kl=c):hs(n,e),gs(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for(Gl=e,d=e.child;null!==d;){for(f=Gl=d;null!==Gl;){switch(m=(p=Gl).child,p.tag){case 0:case 11:case 14:case 15:ts(4,p,p.return);break;case 1:Jl(p,p.return);var h=p.stateNode;if("function"==typeof h.componentWillUnmount){r=p,t=p.return;try{n=r,h.props=n.memoizedProps,h.state=n.memoizedState,h.componentWillUnmount()}catch(e){Eu(r,t,e)}}break;case 5:Jl(p,p.return);break;case 22:if(null!==p.memoizedState){xs(f);continue}}null!==m?(m.return=p,Gl=m):xs(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=f.stateNode,l=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=he("display",l))}catch(n){Eu(e,e.return,n)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(n){Eu(e,e.return,n)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:hs(n,e),gs(e),4&r&&ms(e);case 21:}}function gs(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(is(t)){var r=t;break e}t=t.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),us(e,ls(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ss(e,ls(e),i);break;default:throw Error(o(161))}}catch(n){Eu(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function vs(e,n,t){Gl=e,bs(e,n,t)}function bs(e,n,t){for(var r=!!(1&e.mode);null!==Gl;){var a=Gl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Xl;if(!i){var l=a.alternate,s=null!==l&&null!==l.memoizedState||Kl;l=Xl;var u=Kl;if(Xl=i,(Kl=s)&&!u)for(Gl=a;null!==Gl;)s=(i=Gl).child,22===i.tag&&null!==i.memoizedState?Cs(a):null!==s?(s.return=i,Gl=s):Cs(a);for(;null!==o;)Gl=o,bs(o,n,t),o=o.sibling;Gl=a,Xl=l,Kl=u}ys(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Gl=o):ys(e)}}function ys(e){for(;null!==Gl;){var n=Gl;if(8772&n.flags){var t=n.alternate;try{if(8772&n.flags)switch(n.tag){case 0:case 11:case 15:Kl||rs(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Kl)if(null===t)r.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:tl(n.type,t.memoizedProps);r.componentDidUpdate(a,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=n.updateQueue;null!==i&&Vo(n,i,r);break;case 3:var l=n.updateQueue;if(null!==l){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Vo(n,l,t)}break;case 5:var s=n.stateNode;if(null===t&&4&n.flags){t=s;var u=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&t.focus();break;case"img":u.src&&(t.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var c=n.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Wn(f)}}}break;default:throw Error(o(163))}Kl||512&n.flags&&as(n)}catch(e){Eu(n,n.return,e)}}if(n===e){Gl=null;break}if(null!==(t=n.sibling)){t.return=n.return,Gl=t;break}Gl=n.return}}function xs(e){for(;null!==Gl;){var n=Gl;if(n===e){Gl=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Gl=t;break}Gl=n.return}}function Cs(e){for(;null!==Gl;){var n=Gl;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{rs(4,n)}catch(e){Eu(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var a=n.return;try{r.componentDidMount()}catch(e){Eu(n,a,e)}}var o=n.return;try{as(n)}catch(e){Eu(n,o,e)}break;case 5:var i=n.return;try{as(n)}catch(e){Eu(n,i,e)}}}catch(e){Eu(n,n.return,e)}if(n===e){Gl=null;break}var l=n.sibling;if(null!==l){l.return=n.return,Gl=l;break}Gl=n.return}}var Bs,Es=Math.ceil,ks=y.ReactCurrentDispatcher,ws=y.ReactCurrentOwner,Ss=y.ReactCurrentBatchConfig,Is=0,Ns=null,js=null,_s=0,zs=0,Ps=Ea(0),Ts=0,Rs=null,Ls=0,Ms=0,Os=0,Fs=null,Ds=null,Us=0,qs=1/0,Ws=null,Vs=!1,Qs=null,Hs=null,$s=!1,Ys=null,Xs=0,Ks=0,Zs=null,Gs=-1,Js=0;function eu(){return 6&Is?Ze():-1!==Gs?Gs:Gs=Ze()}function nu(e){return 1&e.mode?2&Is&&0!==_s?_s&-_s:null!==Ao.transition?(0===Js&&(Js=An()),Js):0!==(e=yn)?e:e=void 0===(e=window.event)?16:Zn(e.type):1}function tu(e,n,t,r){if(50<Ks)throw Ks=0,Zs=null,Error(o(185));vn(e,t,r),2&Is&&e===Ns||(e===Ns&&(!(2&Is)&&(Ms|=t),4===Ts&&lu(e,_s)),ru(e,r),1===t&&0===Is&&!(1&n.mode)&&(qs=Ze()+500,Fa&&qa()))}function ru(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-ln(o),l=1<<i,s=a[i];-1===s?l&t&&!(l&r)||(a[i]=mn(l,n)):s<=n&&(e.expiredLanes|=l),o&=~l}}(e,n);var r=pn(e,e===Ns?_s:0);if(0===r)null!==t&&Ye(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ye(t),1===n)0===e.tag?function(e){Fa=!0,Ua(e)}(su.bind(null,e)):Ua(su.bind(null,e)),ia((function(){!(6&Is)&&qa()})),t=null;else{switch(xn(r)){case 1:t=Je;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Nu(t,au.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function au(e,n){if(Gs=-1,Js=0,6&Is)throw Error(o(327));var t=e.callbackNode;if(Cu()&&e.callbackNode!==t)return null;var r=pn(e,e===Ns?_s:0);if(0===r)return null;if(30&r||r&e.expiredLanes||n)n=Au(e,r);else{n=r;var a=Is;Is|=2;var i=mu();for(Ns===e&&_s===n||(Ws=null,qs=Ze()+500,fu(e,n));;)try{vu();break}catch(n){pu(e,n)}So(),ks.current=i,Is=a,null!==js?n=0:(Ns=null,_s=0,n=Ts)}if(0!==n){if(2===n&&0!==(a=hn(e))&&(r=a,n=ou(e,a)),1===n)throw t=Rs,fu(e,0),lu(e,r),ru(e,Ze()),t;if(6===n)lu(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var a=t[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(a)||(n=Au(e,r),2===n&&(i=hn(e),0!==i&&(r=i,n=ou(e,i))),1!==n)))throw t=Rs,fu(e,0),lu(e,r),ru(e,Ze()),t;switch(e.finishedWork=a,e.finishedLanes=r,n){case 0:case 1:throw Error(o(345));case 2:case 5:xu(e,Ds,Ws);break;case 3:if(lu(e,r),(130023424&r)===r&&10<(n=Us+500-Ze())){if(0!==pn(e,0))break;if(((a=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(xu.bind(null,e,Ds,Ws),n);break}xu(e,Ds,Ws);break;case 4:if(lu(e,r),(4194240&r)===r)break;for(n=e.eventTimes,a=-1;0<r;){var l=31-ln(r);i=1<<l,(l=n[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Ze()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Es(r/1960))-r)){e.timeoutHandle=ra(xu.bind(null,e,Ds,Ws),r);break}xu(e,Ds,Ws);break;default:throw Error(o(329))}}}return ru(e,Ze()),e.callbackNode===t?au.bind(null,e):null}function ou(e,n){var t=Fs;return e.current.memoizedState.isDehydrated&&(fu(e,n).flags|=256),2!==(e=Au(e,n))&&(n=Ds,Ds=t,null!==n&&iu(n)),e}function iu(e){null===Ds?Ds=e:Ds.push.apply(Ds,e)}function lu(e,n){for(n&=~Os,n&=~Ms,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-ln(n),r=1<<t;e[t]=-1,n&=~r}}function su(e){if(6&Is)throw Error(o(327));Cu();var n=pn(e,0);if(!(1&n))return ru(e,Ze()),null;var t=Au(e,n);if(0!==e.tag&&2===t){var r=hn(e);0!==r&&(n=r,t=ou(e,r))}if(1===t)throw t=Rs,fu(e,0),lu(e,n),ru(e,Ze()),t;if(6===t)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,xu(e,Ds,Ws),ru(e,Ze()),null}function uu(e,n){var t=Is;Is|=1;try{return e(n)}finally{0===(Is=t)&&(qs=Ze()+500,Fa&&qa())}}function cu(e){null!==Ys&&0===Ys.tag&&!(6&Is)&&Cu();var n=Is;Is|=1;var t=Ss.transition,r=yn;try{if(Ss.transition=null,yn=1,e)return e()}finally{yn=r,Ss.transition=t,!(6&(Is=n))&&qa()}}function du(){zs=Ps.current,ka(Ps)}function fu(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,aa(t)),null!==js)for(t=js.return;null!==t;){var r=t;switch(no(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Pa();break;case 3:Zo(),ka(Na),ka(Ia),ri();break;case 5:Jo(r);break;case 4:Zo();break;case 13:case 19:ka(ei);break;case 10:Io(r.type._context);break;case 22:case 23:du()}t=t.return}if(Ns=e,js=e=Pu(e.current,null),_s=zs=n,Ts=0,Rs=null,Os=Ms=Ls=0,Ds=Fs=null,null!==zo){for(n=0;n<zo.length;n++)if(null!==(r=(t=zo[n]).interleaved)){t.interleaved=null;var a=r.next,o=t.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}t.pending=r}zo=null}return e}function pu(e,n){for(;;){var t=js;try{if(So(),ai.current=Gi,ci){for(var r=li.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ci=!1}if(ii=0,ui=si=li=null,di=!1,fi=0,ws.current=null,null===t||null===t.return){Ts=1,Rs=n,js=null;break}e:{var i=e,l=t.return,s=t,u=n;if(n=_s,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=Al(l);if(null!==m){m.flags&=-257,gl(m,l,s,0,n),1&m.mode&&hl(i,c,n),u=c;var h=(n=m).updateQueue;if(null===h){var A=new Set;A.add(u),n.updateQueue=A}else h.add(u);break e}if(!(1&n)){hl(i,c,n),hu();break e}u=Error(o(426))}else if(ao&&1&s.mode){var g=Al(l);if(null!==g){!(65536&g.flags)&&(g.flags|=256),gl(g,l,s,0,n),ho(ul(u,s));break e}}i=u=ul(u,s),4!==Ts&&(Ts=2),null===Fs?Fs=[i]:Fs.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,n&=-n,i.lanes|=n,qo(i,pl(0,u,n));break e;case 1:s=u;var v=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof v.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Hs&&Hs.has(b)))){i.flags|=65536,n&=-n,i.lanes|=n,qo(i,ml(i,s,n));break e}}i=i.return}while(null!==i)}yu(t)}catch(e){n=e,js===t&&null!==t&&(js=t=t.return);continue}break}}function mu(){var e=ks.current;return ks.current=Gi,null===e?Gi:e}function hu(){0!==Ts&&3!==Ts&&2!==Ts||(Ts=4),null===Ns||!(268435455&Ls)&&!(268435455&Ms)||lu(Ns,_s)}function Au(e,n){var t=Is;Is|=2;var r=mu();for(Ns===e&&_s===n||(Ws=null,fu(e,n));;)try{gu();break}catch(n){pu(e,n)}if(So(),Is=t,ks.current=r,null!==js)throw Error(o(261));return Ns=null,_s=0,Ts}function gu(){for(;null!==js;)bu(js)}function vu(){for(;null!==js&&!Xe();)bu(js)}function bu(e){var n=Bs(e.alternate,e,zs);e.memoizedProps=e.pendingProps,null===n?yu(e):js=n,ws.current=null}function yu(e){var n=e;do{var t=n.alternate;if(e=n.return,32768&n.flags){if(null!==(t=Yl(t,n)))return t.flags&=32767,void(js=t);if(null===e)return Ts=6,void(js=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(t=$l(t,n,zs)))return void(js=t);if(null!==(n=n.sibling))return void(js=n);js=n=e}while(null!==n);0===Ts&&(Ts=5)}function xu(e,n,t){var r=yn,a=Ss.transition;try{Ss.transition=null,yn=1,function(e,n,t,r){do{Cu()}while(null!==Ys);if(6&Is)throw Error(o(327));t=e.finishedWork;var a=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var a=31-ln(t),o=1<<a;n[a]=0,r[a]=-1,e[a]=-1,t&=~o}}(e,i),e===Ns&&(js=Ns=null,_s=0),!(2064&t.subtreeFlags)&&!(2064&t.flags)||$s||($s=!0,Nu(nn,(function(){return Cu(),null}))),i=!!(15990&t.flags),15990&t.subtreeFlags||i){i=Ss.transition,Ss.transition=null;var l=yn;yn=1;var s=Is;Is|=4,ws.current=null,function(e,n){if(ea=Qn,pr(e=fr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{t.nodeType,i.nodeType}catch(e){t=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,p=null;n:for(;;){for(var m;f!==t||0!==a&&3!==f.nodeType||(s=l+a),f!==i||0!==r&&3!==f.nodeType||(u=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(m=f.firstChild);)p=f,f=m;for(;;){if(f===e)break n;if(p===t&&++c===a&&(s=l),p===i&&++d===r&&(u=l),null!==(m=f.nextSibling))break;p=(f=p).parentNode}f=m}t=-1===s||-1===u?null:{start:s,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;for(na={focusedElem:e,selectionRange:t},Qn=!1,Gl=n;null!==Gl;)if(e=(n=Gl).child,1028&n.subtreeFlags&&null!==e)e.return=n,Gl=e;else for(;null!==Gl;){n=Gl;try{var h=n.alternate;if(1024&n.flags)switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var A=h.memoizedProps,g=h.memoizedState,v=n.stateNode,b=v.getSnapshotBeforeUpdate(n.elementType===n.type?A:tl(n.type,A),g);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var y=n.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(o(163))}}catch(e){Eu(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Gl=e;break}Gl=n.return}h=ns,ns=!1}(e,t),As(t,e),mr(na),Qn=!!ea,na=ea=null,e.current=t,vs(t,e,a),Ke(),Is=s,yn=l,Ss.transition=i}else e.current=t;if($s&&($s=!1,Ys=e,Xs=a),0===(i=e.pendingLanes)&&(Hs=null),function(e){if(on&&"function"==typeof on.onCommitFiberRoot)try{on.onCommitFiberRoot(an,e,void 0,!(128&~e.current.flags))}catch(e){}}(t.stateNode),ru(e,Ze()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((a=n[t]).value,{componentStack:a.stack,digest:a.digest});if(Vs)throw Vs=!1,e=Qs,Qs=null,e;!!(1&Xs)&&0!==e.tag&&Cu(),1&(i=e.pendingLanes)?e===Zs?Ks++:(Ks=0,Zs=e):Ks=0,qa()}(e,n,t,r)}finally{Ss.transition=a,yn=r}return null}function Cu(){if(null!==Ys){var e=xn(Xs),n=Ss.transition,t=yn;try{if(Ss.transition=null,yn=16>e?16:e,null===Ys)var r=!1;else{if(e=Ys,Ys=null,Xs=0,6&Is)throw Error(o(331));var a=Is;for(Is|=4,Gl=e.current;null!==Gl;){var i=Gl,l=i.child;if(16&Gl.flags){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Gl=c;null!==Gl;){var d=Gl;switch(d.tag){case 0:case 11:case 15:ts(8,d,i)}var f=d.child;if(null!==f)f.return=d,Gl=f;else for(;null!==Gl;){var p=(d=Gl).sibling,m=d.return;if(os(d),d===c){Gl=null;break}if(null!==p){p.return=m,Gl=p;break}Gl=m}}}var h=i.alternate;if(null!==h){var A=h.child;if(null!==A){h.child=null;do{var g=A.sibling;A.sibling=null,A=g}while(null!==A)}}Gl=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Gl=l;else e:for(;null!==Gl;){if(2048&(i=Gl).flags)switch(i.tag){case 0:case 11:case 15:ts(9,i,i.return)}var v=i.sibling;if(null!==v){v.return=i.return,Gl=v;break e}Gl=i.return}}var b=e.current;for(Gl=b;null!==Gl;){var y=(l=Gl).child;if(2064&l.subtreeFlags&&null!==y)y.return=l,Gl=y;else e:for(l=b;null!==Gl;){if(2048&(s=Gl).flags)try{switch(s.tag){case 0:case 11:case 15:rs(9,s)}}catch(e){Eu(s,s.return,e)}if(s===l){Gl=null;break e}var x=s.sibling;if(null!==x){x.return=s.return,Gl=x;break e}Gl=s.return}}if(Is=a,qa(),on&&"function"==typeof on.onPostCommitFiberRoot)try{on.onPostCommitFiberRoot(an,e)}catch(e){}r=!0}return r}finally{yn=t,Ss.transition=n}}return!1}function Bu(e,n,t){e=Do(e,n=pl(0,n=ul(t,n),1),1),n=eu(),null!==e&&(vn(e,1,n),ru(e,n))}function Eu(e,n,t){if(3===e.tag)Bu(e,e,t);else for(;null!==n;){if(3===n.tag){Bu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r))){n=Do(n,e=ml(n,e=ul(t,e),1),1),e=eu(),null!==n&&(vn(n,1,e),ru(n,e));break}}n=n.return}}function ku(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=eu(),e.pingedLanes|=e.suspendedLanes&t,Ns===e&&(_s&t)===t&&(4===Ts||3===Ts&&(130023424&_s)===_s&&500>Ze()-Us?fu(e,0):Os|=t),ru(e,n)}function wu(e,n){0===n&&(1&e.mode?(n=dn,!(130023424&(dn<<=1))&&(dn=4194304)):n=1);var t=eu();null!==(e=Ro(e,n))&&(vn(e,n,t),ru(e,t))}function Su(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),wu(e,t)}function Iu(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(t=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(n),wu(e,t)}function Nu(e,n){return $e(e,n)}function ju(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function _u(e,n,t,r){return new ju(e,n,t,r)}function zu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Pu(e,n){var t=e.alternate;return null===t?((t=_u(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Tu(e,n,t,r,a,i){var l=2;if(r=e,"function"==typeof e)zu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case B:return Ru(t.children,a,i,n);case E:l=8,a|=8;break;case k:return(e=_u(12,t,n,2|a)).elementType=k,e.lanes=i,e;case N:return(e=_u(13,t,n,a)).elementType=N,e.lanes=i,e;case j:return(e=_u(19,t,n,a)).elementType=j,e.lanes=i,e;case P:return Lu(t,a,i,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case w:l=10;break e;case S:l=9;break e;case I:l=11;break e;case _:l=14;break e;case z:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(n=_u(l,t,n,a)).elementType=e,n.type=r,n.lanes=i,n}function Ru(e,n,t,r){return(e=_u(7,e,r,n)).lanes=t,e}function Lu(e,n,t,r){return(e=_u(22,e,r,n)).elementType=P,e.lanes=t,e.stateNode={isHidden:!1},e}function Mu(e,n,t){return(e=_u(6,e,null,n)).lanes=t,e}function Ou(e,n,t){return(n=_u(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Fu(e,n,t,r,a){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gn(0),this.expirationTimes=gn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gn(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Du(e,n,t,r,a,o,i,l,s){return e=new Fu(e,n,t,l,s),1===n?(n=1,!0===o&&(n|=8)):n=0,o=_u(3,null,null,n),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Mo(o),e}function Uu(e){if(!e)return Sa;e:{if(qe(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(za(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(o(171))}if(1===e.tag){var t=e.type;if(za(t))return Ra(e,t,n)}return n}function qu(e,n,t,r,a,o,i,l,s){return(e=Du(t,r,!0,e,0,o,0,l,s)).context=Uu(null),t=e.current,(o=Fo(r=eu(),a=nu(t))).callback=null!=n?n:null,Do(t,o,a),e.current.lanes=a,vn(e,a,r),ru(e,r),e}function Wu(e,n,t,r){var a=n.current,o=eu(),i=nu(a);return t=Uu(t),null===n.context?n.context=t:n.pendingContext=t,(n=Fo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Do(a,n,i))&&(tu(e,a,i,o),Uo(e,a,i)),i}function Vu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qu(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Hu(e,n){Qu(e,n),(e=e.alternate)&&Qu(e,n)}Bs=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||Na.current)bl=!0;else{if(!(e.lanes&t||128&n.flags))return bl=!1,function(e,n,t){switch(n.tag){case 3:Nl(n),mo();break;case 5:Go(n);break;case 1:za(n.type)&&La(n);break;case 4:Ko(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,a=n.memoizedProps.value;wa(Bo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(wa(ei,1&ei.current),n.flags|=128,null):t&n.child.childLanes?Ml(e,n,t):(wa(ei,1&ei.current),null!==(e=Vl(e,n,t))?e.sibling:null);wa(ei,1&ei.current);break;case 19:if(r=!!(t&n.childLanes),128&e.flags){if(r)return ql(e,n,t);n.flags|=128}if(null!==(a=n.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),wa(ei,ei.current),r)break;return null;case 22:case 23:return n.lanes=0,El(e,n,t)}return Vl(e,n,t)}(e,n,t);bl=!!(131072&e.flags)}else bl=!1,ao&&1048576&n.flags&&Ja(n,Ha,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Wl(e,n),e=n.pendingProps;var a=_a(n,Ia.current);jo(n,t),a=Ai(null,n,r,e,a,t);var i=gi();return n.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,za(r)?(i=!0,La(n)):i=!1,n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Mo(n),a.updater=al,n.stateNode=a,a._reactInternals=n,sl(n,r,e,t),n=Il(null,n,r,!0,i,t)):(n.tag=0,ao&&i&&eo(n),yl(null,n,a,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Wl(e,n),e=n.pendingProps,r=(a=r._init)(r._payload),n.type=r,a=n.tag=function(e){if("function"==typeof e)return zu(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===_)return 14}return 2}(r),e=tl(r,e),a){case 0:n=wl(null,n,r,e,t);break e;case 1:n=Sl(null,n,r,e,t);break e;case 11:n=xl(null,n,r,e,t);break e;case 14:n=Cl(null,n,r,tl(r.type,e),t);break e}throw Error(o(306,r,""))}return n;case 0:return r=n.type,a=n.pendingProps,wl(e,n,r,a=n.elementType===r?a:tl(r,a),t);case 1:return r=n.type,a=n.pendingProps,Sl(e,n,r,a=n.elementType===r?a:tl(r,a),t);case 3:e:{if(Nl(n),null===e)throw Error(o(387));r=n.pendingProps,a=(i=n.memoizedState).element,Oo(e,n),Wo(n,r,null,t);var l=n.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},n.updateQueue.baseState=i,n.memoizedState=i,256&n.flags){n=jl(e,n,r,t,a=ul(Error(o(423)),n));break e}if(r!==a){n=jl(e,n,r,t,a=ul(Error(o(424)),n));break e}for(ro=ua(n.stateNode.containerInfo.firstChild),to=n,ao=!0,oo=null,t=Co(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(mo(),r===a){n=Vl(e,n,t);break e}yl(e,n,r,t)}n=n.child}return n;case 5:return Go(n),null===e&&uo(n),r=n.type,a=n.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,ta(r,a)?l=null:null!==i&&ta(r,i)&&(n.flags|=32),kl(e,n),yl(e,n,l,t),n.child;case 6:return null===e&&uo(n),null;case 13:return Ml(e,n,t);case 4:return Ko(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=xo(n,null,r,t):yl(e,n,r,t),n.child;case 11:return r=n.type,a=n.pendingProps,xl(e,n,r,a=n.elementType===r?a:tl(r,a),t);case 7:return yl(e,n,n.pendingProps,t),n.child;case 8:case 12:return yl(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,a=n.pendingProps,i=n.memoizedProps,l=a.value,wa(Bo,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Na.current){n=Vl(e,n,t);break e}}else for(null!==(i=n.child)&&(i.return=n);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Fo(-1,t&-t)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=t,null!==(u=i.alternate)&&(u.lanes|=t),No(i.return,t,n),s.lanes|=t;break}u=u.next}}else if(10===i.tag)l=i.type===n.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=t,null!==(s=l.alternate)&&(s.lanes|=t),No(l,t,n),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===n){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}yl(e,n,a.children,t),n=n.child}return n;case 9:return a=n.type,r=n.pendingProps.children,jo(n,t),r=r(a=_o(a)),n.flags|=1,yl(e,n,r,t),n.child;case 14:return a=tl(r=n.type,n.pendingProps),Cl(e,n,r,a=tl(r.type,a),t);case 15:return Bl(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,a=n.pendingProps,a=n.elementType===r?a:tl(r,a),Wl(e,n),n.tag=1,za(r)?(e=!0,La(n)):e=!1,jo(n,t),il(n,r,a),sl(n,r,a,t),Il(null,n,r,!0,e,t);case 19:return ql(e,n,t);case 22:return El(e,n,t)}throw Error(o(156,n.tag))};var $u="function"==typeof reportError?reportError:function(e){console.error(e)};function Yu(e){this._internalRoot=e}function Xu(e){this._internalRoot=e}function Ku(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Gu(){}function Ju(e,n,t,r,a){var o=t._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Vu(i);l.call(e)}}Wu(n,i,e,a)}else i=function(e,n,t,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Vu(i);o.call(e)}}var i=qu(n,r,e,0,null,!1,0,"",Gu);return e._reactRootContainer=i,e[ma]=i.current,qr(8===e.nodeType?e.parentNode:e),cu(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Vu(s);l.call(e)}}var s=Du(e,0,!1,null,0,!1,0,"",Gu);return e._reactRootContainer=s,e[ma]=s.current,qr(8===e.nodeType?e.parentNode:e),cu((function(){Wu(n,s,t,r)})),s}(t,n,e,a,r);return Vu(i)}Xu.prototype.render=Yu.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(o(409));Wu(e,n,null,null)},Xu.prototype.unmount=Yu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;cu((function(){Wu(null,e,null,null)})),n[ma]=null}},Xu.prototype.unstable_scheduleHydration=function(e){if(e){var n=kn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<Tn.length&&0!==n&&n<Tn[t].priority;t++);Tn.splice(t,0,e),0===t&&On(e)}},Cn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=fn(n.pendingLanes);0!==t&&(bn(n,1|t),ru(n,Ze()),!(6&Is)&&(qs=Ze()+500,qa()))}break;case 13:cu((function(){var n=Ro(e,1);if(null!==n){var t=eu();tu(n,e,1,t)}})),Hu(e,1)}},Bn=function(e){if(13===e.tag){var n=Ro(e,134217728);null!==n&&tu(n,e,134217728,eu()),Hu(e,134217728)}},En=function(e){if(13===e.tag){var n=nu(e),t=Ro(e,n);null!==t&&tu(t,e,n,eu()),Hu(e,n)}},kn=function(){return yn},wn=function(e,n){var t=yn;try{return yn=e,n()}finally{yn=t}},Ce=function(e,n,t){switch(n){case"input":if(G(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var a=xa(r);if(!a)throw Error(o(90));$(r),G(r,a)}}}break;case"textarea":oe(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Ie=uu,Ne=cu;var ec={usingClientEntryPoint:!1,Events:[ba,ya,xa,we,Se,uu]},nc={findFiberByHostInstance:va,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},tc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Qe(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{an=rc.inject(tc),on=rc}catch(ce){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ku(n))throw Error(o(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Ku(e))throw Error(o(299));var t=!1,r="",a=$u;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(a=n.onRecoverableError)),n=Du(e,1,!1,null,0,t,0,r,a),e[ma]=n.current,qr(8===e.nodeType?e.parentNode:e),new Yu(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Qe(n))?null:e.stateNode},n.flushSync=function(e){return cu(e)},n.hydrate=function(e,n,t){if(!Zu(n))throw Error(o(200));return Ju(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Ku(e))throw Error(o(405));var r=null!=t&&t.hydratedSources||null,a=!1,i="",l=$u;if(null!=t&&(!0===t.unstable_strictMode&&(a=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(l=t.onRecoverableError)),n=qu(n,null,e,1,null!=t?t:null,a,0,i,l),e[ma]=n.current,qr(e),r)for(e=0;e<r.length;e++)a=(a=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a);return new Xu(n)},n.render=function(e,n,t){if(!Zu(n))throw Error(o(200));return Ju(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(o(40));return!!e._reactRootContainer&&(cu((function(){Ju(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},n.unstable_batchedUpdates=uu,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Zu(t))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Ju(e,n,t,!1,r)},n.version="18.3.1-next-f1338f8080-20240426"},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},696:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([e.id,"/* client/src/App.css */\n:root {\n    --primary: #00796b;\n    --secondary: #b2dfdb;\n    --accent: #ff9e80;\n    --background: #f8fafc;\n    --text: #2c3e50;\n    --card-bg: #ffffff;\n    --hover-bg: #004d40;\n  }\n  \n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  \n  body {\n    font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;\n    background-color: var(--background);\n    color: var(--text);\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  a {\n    text-decoration: none;\n    color: var(--primary);\n  }\n  \n  ul {\n    list-style-type: none;\n  }\n  \n  button, input, select, textarea {\n    font-family: inherit;\n  }\n  \n  img {\n    max-width: 100%;\n    height: auto;\n  }\n  \n  .container {\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n  }\n  \n  /* Animation classes */\n  .fade-in {\n    animation: fadeIn 0.6s ease-in;\n  }\n  \n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  /* Utility classes */\n  .text-center {\n    text-align: center;\n  }\n  \n  .mt-1 { margin-top: 0.5rem; }\n  .mt-2 { margin-top: 1rem; }\n  .mt-3 { margin-top: 1.5rem; }\n  .mt-4 { margin-top: 2rem; }\n  .mt-5 { margin-top: 3rem; }\n  \n  .mb-1 { margin-bottom: 0.5rem; }\n  .mb-2 { margin-bottom: 1rem; }\n  .mb-3 { margin-bottom: 1.5rem; }\n  .mb-4 { margin-bottom: 2rem; }\n  .mb-5 { margin-bottom: 3rem; }\n  \n  .py-1 { padding-top: 0.5rem; padding-bottom: 0.5rem; }\n  .py-2 { padding-top: 1rem; padding-bottom: 1rem; }\n  .py-3 { padding-top: 1.5rem; padding-bottom: 1.5rem; }\n  .py-4 { padding-top: 2rem; padding-bottom: 2rem; }\n  .py-5 { padding-top: 3rem; padding-bottom: 3rem; }\n  \n  .px-1 { padding-left: 0.5rem; padding-right: 0.5rem; }\n  .px-2 { padding-left: 1rem; padding-right: 1rem; }\n  .px-3 { padding-left: 1.5rem; padding-right: 1.5rem; }\n  .px-4 { padding-left: 2rem; padding-right: 2rem; }\n  .px-5 { padding-left: 3rem; padding-right: 3rem; }","",{version:3,sources:["webpack://./client/src/App.css"],names:[],mappings:"AAAA,uBAAuB;AACvB;IACI,kBAAkB;IAClB,oBAAoB;IACpB,iBAAiB;IACjB,qBAAqB;IACrB,eAAe;IACf,kBAAkB;IAClB,mBAAmB;EACrB;;EAEA;IACE,sBAAsB;IACtB,SAAS;IACT,UAAU;EACZ;;EAEA;IACE,oDAAoD;IACpD,mCAAmC;IACnC,kBAAkB;IAClB,gBAAgB;IAChB,mCAAmC;IACnC,kCAAkC;EACpC;;EAEA;IACE,qBAAqB;IACrB,qBAAqB;EACvB;;EAEA;IACE,qBAAqB;EACvB;;EAEA;IACE,oBAAoB;EACtB;;EAEA;IACE,eAAe;IACf,YAAY;EACd;;EAEA;IACE,WAAW;IACX,iBAAiB;IACjB,cAAc;IACd,eAAe;EACjB;;EAEA,sBAAsB;EACtB;IACE,8BAA8B;EAChC;;EAEA;IACE;MACE,UAAU;MACV,2BAA2B;IAC7B;IACA;MACE,UAAU;MACV,wBAAwB;IAC1B;EACF;;EAEA,oBAAoB;EACpB;IACE,kBAAkB;EACpB;;EAEA,QAAQ,kBAAkB,EAAE;EAC5B,QAAQ,gBAAgB,EAAE;EAC1B,QAAQ,kBAAkB,EAAE;EAC5B,QAAQ,gBAAgB,EAAE;EAC1B,QAAQ,gBAAgB,EAAE;;EAE1B,QAAQ,qBAAqB,EAAE;EAC/B,QAAQ,mBAAmB,EAAE;EAC7B,QAAQ,qBAAqB,EAAE;EAC/B,QAAQ,mBAAmB,EAAE;EAC7B,QAAQ,mBAAmB,EAAE;;EAE7B,QAAQ,mBAAmB,EAAE,sBAAsB,EAAE;EACrD,QAAQ,iBAAiB,EAAE,oBAAoB,EAAE;EACjD,QAAQ,mBAAmB,EAAE,sBAAsB,EAAE;EACrD,QAAQ,iBAAiB,EAAE,oBAAoB,EAAE;EACjD,QAAQ,iBAAiB,EAAE,oBAAoB,EAAE;;EAEjD,QAAQ,oBAAoB,EAAE,qBAAqB,EAAE;EACrD,QAAQ,kBAAkB,EAAE,mBAAmB,EAAE;EACjD,QAAQ,oBAAoB,EAAE,qBAAqB,EAAE;EACrD,QAAQ,kBAAkB,EAAE,mBAAmB,EAAE;EACjD,QAAQ,kBAAkB,EAAE,mBAAmB,EAAE",sourcesContent:["/* client/src/App.css */\n:root {\n    --primary: #00796b;\n    --secondary: #b2dfdb;\n    --accent: #ff9e80;\n    --background: #f8fafc;\n    --text: #2c3e50;\n    --card-bg: #ffffff;\n    --hover-bg: #004d40;\n  }\n  \n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  \n  body {\n    font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;\n    background-color: var(--background);\n    color: var(--text);\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  a {\n    text-decoration: none;\n    color: var(--primary);\n  }\n  \n  ul {\n    list-style-type: none;\n  }\n  \n  button, input, select, textarea {\n    font-family: inherit;\n  }\n  \n  img {\n    max-width: 100%;\n    height: auto;\n  }\n  \n  .container {\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n  }\n  \n  /* Animation classes */\n  .fade-in {\n    animation: fadeIn 0.6s ease-in;\n  }\n  \n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  /* Utility classes */\n  .text-center {\n    text-align: center;\n  }\n  \n  .mt-1 { margin-top: 0.5rem; }\n  .mt-2 { margin-top: 1rem; }\n  .mt-3 { margin-top: 1.5rem; }\n  .mt-4 { margin-top: 2rem; }\n  .mt-5 { margin-top: 3rem; }\n  \n  .mb-1 { margin-bottom: 0.5rem; }\n  .mb-2 { margin-bottom: 1rem; }\n  .mb-3 { margin-bottom: 1.5rem; }\n  .mb-4 { margin-bottom: 2rem; }\n  .mb-5 { margin-bottom: 3rem; }\n  \n  .py-1 { padding-top: 0.5rem; padding-bottom: 0.5rem; }\n  .py-2 { padding-top: 1rem; padding-bottom: 1rem; }\n  .py-3 { padding-top: 1.5rem; padding-bottom: 1.5rem; }\n  .py-4 { padding-top: 2rem; padding-bottom: 2rem; }\n  .py-5 { padding-top: 3rem; padding-bottom: 3rem; }\n  \n  .px-1 { padding-left: 0.5rem; padding-right: 0.5rem; }\n  .px-2 { padding-left: 1rem; padding-right: 1rem; }\n  .px-3 { padding-left: 1.5rem; padding-right: 1.5rem; }\n  .px-4 { padding-left: 2rem; padding-right: 2rem; }\n  .px-5 { padding-left: 3rem; padding-right: 3rem; }"],sourceRoot:""}]);const l=i},699:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([e.id,"/* client/src/pages/Home.css */\n:root {\n    --primary: #00796b;\n    --secondary: #b2dfdb;\n    --accent: #ff9e80;\n    --background: #f8fafc;\n    --text: #2c3e50;\n    --card-bg: #ffffff;\n    --hover-bg: #004d40;\n    --quote-bg: #e0f7fa;\n    --light-blue: #b3e5fc;\n  }\n  \n  /* Main container */\n  .home-container {\n    width: 100%;\n    font-family: 'Segoe UI', sans-serif;\n    color: var(--text);\n    margin: 0;\n    padding: 0;\n    background-color: var(--background);\n  }\n  \n  .container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n  }\n  \n  /* Hero Section */\n  .hero-section {\n    background: linear-gradient(rgba(178, 235, 242, 0.5), rgba(224, 247, 250, 0.7));\n    background-size: cover;\n    background-position: center;\n    color: var(--text);\n    text-align: center;\n    padding: 120px 20px;\n    position: relative;\n  }\n  \n  .hero-content {\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .hero-section h1 {\n    font-size: 2.8rem;\n    margin-bottom: 20px;\n    line-height: 1.2;\n  }\n  \n  .hero-section h2 {\n    font-size: 1.5rem;\n    font-weight: 400;\n    margin-bottom: 40px;\n    line-height: 1.5;\n  }\n  \n  .cta-buttons {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: 15px;\n    margin-top: 30px;\n  }\n  \n  .cta-button {\n    display: inline-block;\n    padding: 14px 28px;\n    background-color: var(--accent);\n    color: white;\n    text-decoration: none;\n    border-radius: 30px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n  \n  .cta-button:hover {\n    background-color: #ff7d57;\n    transform: translateY(-3px);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n  }\n  \n  /* Mission Section */\n  .mission-section {\n    padding: 80px 0;\n    background-color: white;\n    text-align: center;\n  }\n  \n  .mission-section h2 {\n    color: var(--primary);\n    font-size: 2.2rem;\n    margin-bottom: 30px;\n  }\n  \n  .mission-content {\n    max-width: 800px;\n    margin: 0 auto 40px;\n    line-height: 1.8;\n    font-size: 1.1rem;\n  }\n  \n  .quote-block {\n    background-color: var(--quote-bg);\n    border-left: 5px solid var(--primary);\n    padding: 20px;\n    margin: 40px auto;\n    max-width: 800px;\n    border-radius: 4px;\n    font-size: 1.2rem;\n  }\n  \n  .quote-block p {\n    margin: 0;\n  }\n  \n  .drives-us {\n    max-width: 800px;\n    margin: 60px auto;\n    text-align: left;\n  }\n  \n  .drives-us h3 {\n    text-align: center;\n    font-size: 1.8rem;\n    margin-bottom: 20px;\n    color: var(--primary);\n  }\n  \n  .features-list {\n    list-style-type: none;\n    padding: 0;\n    margin: 40px 0;\n  }\n  \n  .features-list li {\n    display: flex;\n    align-items: flex-start;\n    margin-bottom: 25px;\n    background-color: var(--card-bg);\n    border-radius: 8px;\n    padding: 20px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);\n    transition: transform 0.3s ease;\n  }\n  \n  .features-list li:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.08);\n  }\n  \n  .feature-icon {\n    font-size: 2rem;\n    margin-right: 20px;\n    min-width: 40px;\n    text-align: center;\n  }\n  \n  .feature-content {\n    flex: 1;\n  }\n  \n  .feature-content h4 {\n    margin: 0 0 8px 0;\n    color: var(--primary);\n    font-size: 1.3rem;\n  }\n  \n  .feature-content p {\n    margin: 0;\n    line-height: 1.5;\n  }\n  \n  /* Founder Section */\n  .founder-section {\n    background-color: var(--secondary);\n    padding: 80px 0;\n    position: relative;\n  }\n  \n  .founder-section h2 {\n    text-align: center;\n    font-size: 2.2rem;\n    margin-bottom: 40px;\n    color: var(--primary);\n  }\n  \n  .founder-content {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    gap: 40px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n  \n  .founder-image {\n    flex: 0 0 300px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 300px;\n    background-color: #e0e0e0;\n    border-radius: 10px;\n    color: #757575;\n    font-size: 1.2rem;\n  }\n  \n  .founder-message {\n    flex: 1;\n    min-width: 300px;\n    background-color: white;\n    padding: 30px;\n    border-radius: 10px;\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);\n    font-size: 1.1rem;\n    line-height: 1.7;\n  }\n  \n  .founder-signature {\n    margin-top: 20px;\n    text-align: right;\n    font-size: 1.1rem;\n  }\n  \n  /* Resources Preview Section */\n  .resources-preview {\n    padding: 80px 0;\n    background-color: var(--background);\n  }\n  \n  .resources-preview h2 {\n    text-align: center;\n    font-size: 2.2rem;\n    margin-bottom: 40px;\n    color: var(--primary);\n  }\n  \n  .resource-cards {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 30px;\n    margin-bottom: 40px;\n  }\n  \n  .resource-card {\n    background-color: white;\n    border-radius: 10px;\n    padding: 30px;\n    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.05);\n    text-align: center;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n  }\n  \n  .resource-card:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.1);\n  }\n  \n  .resource-icon {\n    font-size: 3rem;\n    margin-bottom: 20px;\n  }\n  \n  .resource-card h3 {\n    color: var(--primary);\n    font-size: 1.4rem;\n    margin-bottom: 15px;\n  }\n  \n  .resource-card p {\n    margin-bottom: 20px;\n  }\n  \n  .resource-link {\n    display: inline-block;\n    color: var(--primary);\n    text-decoration: none;\n    font-weight: 600;\n    padding-bottom: 3px;\n    border-bottom: 2px solid transparent;\n    transition: border-color 0.3s ease;\n  }\n  \n  .resource-link:hover {\n    border-color: var(--primary);\n  }\n  \n  .view-all {\n    text-align: center;\n    margin-top: 40px;\n  }\n  \n  .view-all-link {\n    display: inline-block;\n    padding: 12px 25px;\n    background-color: var(--primary);\n    color: white;\n    text-decoration: none;\n    border-radius: 30px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n  }\n  \n  .view-all-link:hover {\n    background-color: var(--hover-bg);\n  }\n  \n  /* Join Section */\n  .join-section {\n    background: linear-gradient(rgba(0, 121, 107, 0.9), rgba(0, 77, 64, 0.9));\n    background-size: cover;\n    background-position: center;\n    color: white;\n    text-align: center;\n    padding: 100px 20px;\n  }\n  \n  .join-section h2 {\n    font-size: 2.2rem;\n    margin-bottom: 20px;\n  }\n  \n  .join-section p {\n    font-size: 1.2rem;\n    margin-bottom: 40px;\n    max-width: 700px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n  \n  .join-button {\n    display: inline-block;\n    padding: 15px 40px;\n    background-color: white;\n    color: var(--primary);\n    text-decoration: none;\n    border-radius: 30px;\n    font-weight: 600;\n    font-size: 1.1rem;\n    transition: all 0.3s ease;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n  }\n  \n  .join-button:hover {\n    background-color: var(--light-blue);\n    transform: translateY(-3px);\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);\n  }\n  \n  /* Responsive Styles */\n  @media (max-width: 768px) {\n    .hero-section h1 {\n      font-size: 2.2rem;\n    }\n    \n    .hero-section h2 {\n      font-size: 1.2rem;\n    }\n    \n    .cta-buttons {\n      flex-direction: column;\n      align-items: center;\n    }\n    \n    .cta-button {\n      width: 100%;\n      max-width: 300px;\n    }\n    \n    .founder-content {\n      flex-direction: column;\n    }\n    \n    .feature-icon {\n      font-size: 1.6rem;\n    }\n  }\n  \n  @media (max-width: 480px) {\n    .hero-section {\n      padding: 80px 20px;\n    }\n    \n    .hero-section h1 {\n      font-size: 1.8rem;\n    }\n    \n    .mission-section h2,\n    .founder-section h2,\n    .resources-preview h2,\n    .join-section h2 {\n      font-size: 1.8rem;\n    }\n    \n    .quote-block {\n      font-size: 1rem;\n    }\n  }","",{version:3,sources:["webpack://./client/src/pages/Home.css"],names:[],mappings:"AAAA,8BAA8B;AAC9B;IACI,kBAAkB;IAClB,oBAAoB;IACpB,iBAAiB;IACjB,qBAAqB;IACrB,eAAe;IACf,kBAAkB;IAClB,mBAAmB;IACnB,mBAAmB;IACnB,qBAAqB;EACvB;;EAEA,mBAAmB;EACnB;IACE,WAAW;IACX,mCAAmC;IACnC,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,mCAAmC;EACrC;;EAEA;IACE,iBAAiB;IACjB,cAAc;IACd,eAAe;EACjB;;EAEA,iBAAiB;EACjB;IACE,+EAA+E;IAC/E,sBAAsB;IACtB,2BAA2B;IAC3B,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,kBAAkB;EACpB;;EAEA;IACE,gBAAgB;IAChB,cAAc;EAChB;;EAEA;IACE,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;EAClB;;EAEA;IACE,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;IACnB,gBAAgB;EAClB;;EAEA;IACE,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,SAAS;IACT,gBAAgB;EAClB;;EAEA;IACE,qBAAqB;IACrB,kBAAkB;IAClB,+BAA+B;IAC/B,YAAY;IACZ,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;IAChB,yBAAyB;IACzB,wCAAwC;EAC1C;;EAEA;IACE,yBAAyB;IACzB,2BAA2B;IAC3B,0CAA0C;EAC5C;;EAEA,oBAAoB;EACpB;IACE,eAAe;IACf,uBAAuB;IACvB,kBAAkB;EACpB;;EAEA;IACE,qBAAqB;IACrB,iBAAiB;IACjB,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;IAChB,mBAAmB;IACnB,gBAAgB;IAChB,iBAAiB;EACnB;;EAEA;IACE,iCAAiC;IACjC,qCAAqC;IACrC,aAAa;IACb,iBAAiB;IACjB,gBAAgB;IAChB,kBAAkB;IAClB,iBAAiB;EACnB;;EAEA;IACE,SAAS;EACX;;EAEA;IACE,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;EAClB;;EAEA;IACE,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,qBAAqB;EACvB;;EAEA;IACE,qBAAqB;IACrB,UAAU;IACV,cAAc;EAChB;;EAEA;IACE,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,gCAAgC;IAChC,kBAAkB;IAClB,aAAa;IACb,0CAA0C;IAC1C,+BAA+B;EACjC;;EAEA;IACE,2BAA2B;IAC3B,0CAA0C;EAC5C;;EAEA;IACE,eAAe;IACf,kBAAkB;IAClB,eAAe;IACf,kBAAkB;EACpB;;EAEA;IACE,OAAO;EACT;;EAEA;IACE,iBAAiB;IACjB,qBAAqB;IACrB,iBAAiB;EACnB;;EAEA;IACE,SAAS;IACT,gBAAgB;EAClB;;EAEA,oBAAoB;EACpB;IACE,kCAAkC;IAClC,eAAe;IACf,kBAAkB;EACpB;;EAEA;IACE,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,qBAAqB;EACvB;;EAEA;IACE,aAAa;IACb,eAAe;IACf,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,iBAAiB;IACjB,cAAc;EAChB;;EAEA;IACE,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,cAAc;IACd,iBAAiB;EACnB;;EAEA;IACE,OAAO;IACP,gBAAgB;IAChB,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,0CAA0C;IAC1C,iBAAiB;IACjB,gBAAgB;EAClB;;EAEA;IACE,gBAAgB;IAChB,iBAAiB;IACjB,iBAAiB;EACnB;;EAEA,8BAA8B;EAC9B;IACE,eAAe;IACf,mCAAmC;EACrC;;EAEA;IACE,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,qBAAqB;EACvB;;EAEA;IACE,aAAa;IACb,2DAA2D;IAC3D,SAAS;IACT,mBAAmB;EACrB;;EAEA;IACE,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,0CAA0C;IAC1C,kBAAkB;IAClB,qDAAqD;EACvD;;EAEA;IACE,2BAA2B;IAC3B,0CAA0C;EAC5C;;EAEA;IACE,eAAe;IACf,mBAAmB;EACrB;;EAEA;IACE,qBAAqB;IACrB,iBAAiB;IACjB,mBAAmB;EACrB;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,qBAAqB;IACrB,qBAAqB;IACrB,qBAAqB;IACrB,gBAAgB;IAChB,mBAAmB;IACnB,oCAAoC;IACpC,kCAAkC;EACpC;;EAEA;IACE,4BAA4B;EAC9B;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;EAClB;;EAEA;IACE,qBAAqB;IACrB,kBAAkB;IAClB,gCAAgC;IAChC,YAAY;IACZ,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;IAChB,yBAAyB;EAC3B;;EAEA;IACE,iCAAiC;EACnC;;EAEA,iBAAiB;EACjB;IACE,yEAAyE;IACzE,sBAAsB;IACtB,2BAA2B;IAC3B,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;EACrB;;EAEA;IACE,iBAAiB;IACjB,mBAAmB;EACrB;;EAEA;IACE,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;EACpB;;EAEA;IACE,qBAAqB;IACrB,kBAAkB;IAClB,uBAAuB;IACvB,qBAAqB;IACrB,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;IAChB,iBAAiB;IACjB,yBAAyB;IACzB,yCAAyC;EAC3C;;EAEA;IACE,mCAAmC;IACnC,2BAA2B;IAC3B,yCAAyC;EAC3C;;EAEA,sBAAsB;EACtB;IACE;MACE,iBAAiB;IACnB;;IAEA;MACE,iBAAiB;IACnB;;IAEA;MACE,sBAAsB;MACtB,mBAAmB;IACrB;;IAEA;MACE,WAAW;MACX,gBAAgB;IAClB;;IAEA;MACE,sBAAsB;IACxB;;IAEA;MACE,iBAAiB;IACnB;EACF;;EAEA;IACE;MACE,kBAAkB;IACpB;;IAEA;MACE,iBAAiB;IACnB;;IAEA;;;;MAIE,iBAAiB;IACnB;;IAEA;MACE,eAAe;IACjB;EACF",sourcesContent:["/* client/src/pages/Home.css */\n:root {\n    --primary: #00796b;\n    --secondary: #b2dfdb;\n    --accent: #ff9e80;\n    --background: #f8fafc;\n    --text: #2c3e50;\n    --card-bg: #ffffff;\n    --hover-bg: #004d40;\n    --quote-bg: #e0f7fa;\n    --light-blue: #b3e5fc;\n  }\n  \n  /* Main container */\n  .home-container {\n    width: 100%;\n    font-family: 'Segoe UI', sans-serif;\n    color: var(--text);\n    margin: 0;\n    padding: 0;\n    background-color: var(--background);\n  }\n  \n  .container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n  }\n  \n  /* Hero Section */\n  .hero-section {\n    background: linear-gradient(rgba(178, 235, 242, 0.5), rgba(224, 247, 250, 0.7));\n    background-size: cover;\n    background-position: center;\n    color: var(--text);\n    text-align: center;\n    padding: 120px 20px;\n    position: relative;\n  }\n  \n  .hero-content {\n    max-width: 800px;\n    margin: 0 auto;\n  }\n  \n  .hero-section h1 {\n    font-size: 2.8rem;\n    margin-bottom: 20px;\n    line-height: 1.2;\n  }\n  \n  .hero-section h2 {\n    font-size: 1.5rem;\n    font-weight: 400;\n    margin-bottom: 40px;\n    line-height: 1.5;\n  }\n  \n  .cta-buttons {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: 15px;\n    margin-top: 30px;\n  }\n  \n  .cta-button {\n    display: inline-block;\n    padding: 14px 28px;\n    background-color: var(--accent);\n    color: white;\n    text-decoration: none;\n    border-radius: 30px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n  \n  .cta-button:hover {\n    background-color: #ff7d57;\n    transform: translateY(-3px);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n  }\n  \n  /* Mission Section */\n  .mission-section {\n    padding: 80px 0;\n    background-color: white;\n    text-align: center;\n  }\n  \n  .mission-section h2 {\n    color: var(--primary);\n    font-size: 2.2rem;\n    margin-bottom: 30px;\n  }\n  \n  .mission-content {\n    max-width: 800px;\n    margin: 0 auto 40px;\n    line-height: 1.8;\n    font-size: 1.1rem;\n  }\n  \n  .quote-block {\n    background-color: var(--quote-bg);\n    border-left: 5px solid var(--primary);\n    padding: 20px;\n    margin: 40px auto;\n    max-width: 800px;\n    border-radius: 4px;\n    font-size: 1.2rem;\n  }\n  \n  .quote-block p {\n    margin: 0;\n  }\n  \n  .drives-us {\n    max-width: 800px;\n    margin: 60px auto;\n    text-align: left;\n  }\n  \n  .drives-us h3 {\n    text-align: center;\n    font-size: 1.8rem;\n    margin-bottom: 20px;\n    color: var(--primary);\n  }\n  \n  .features-list {\n    list-style-type: none;\n    padding: 0;\n    margin: 40px 0;\n  }\n  \n  .features-list li {\n    display: flex;\n    align-items: flex-start;\n    margin-bottom: 25px;\n    background-color: var(--card-bg);\n    border-radius: 8px;\n    padding: 20px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);\n    transition: transform 0.3s ease;\n  }\n  \n  .features-list li:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.08);\n  }\n  \n  .feature-icon {\n    font-size: 2rem;\n    margin-right: 20px;\n    min-width: 40px;\n    text-align: center;\n  }\n  \n  .feature-content {\n    flex: 1;\n  }\n  \n  .feature-content h4 {\n    margin: 0 0 8px 0;\n    color: var(--primary);\n    font-size: 1.3rem;\n  }\n  \n  .feature-content p {\n    margin: 0;\n    line-height: 1.5;\n  }\n  \n  /* Founder Section */\n  .founder-section {\n    background-color: var(--secondary);\n    padding: 80px 0;\n    position: relative;\n  }\n  \n  .founder-section h2 {\n    text-align: center;\n    font-size: 2.2rem;\n    margin-bottom: 40px;\n    color: var(--primary);\n  }\n  \n  .founder-content {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    gap: 40px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n  \n  .founder-image {\n    flex: 0 0 300px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 300px;\n    background-color: #e0e0e0;\n    border-radius: 10px;\n    color: #757575;\n    font-size: 1.2rem;\n  }\n  \n  .founder-message {\n    flex: 1;\n    min-width: 300px;\n    background-color: white;\n    padding: 30px;\n    border-radius: 10px;\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);\n    font-size: 1.1rem;\n    line-height: 1.7;\n  }\n  \n  .founder-signature {\n    margin-top: 20px;\n    text-align: right;\n    font-size: 1.1rem;\n  }\n  \n  /* Resources Preview Section */\n  .resources-preview {\n    padding: 80px 0;\n    background-color: var(--background);\n  }\n  \n  .resources-preview h2 {\n    text-align: center;\n    font-size: 2.2rem;\n    margin-bottom: 40px;\n    color: var(--primary);\n  }\n  \n  .resource-cards {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 30px;\n    margin-bottom: 40px;\n  }\n  \n  .resource-card {\n    background-color: white;\n    border-radius: 10px;\n    padding: 30px;\n    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.05);\n    text-align: center;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n  }\n  \n  .resource-card:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.1);\n  }\n  \n  .resource-icon {\n    font-size: 3rem;\n    margin-bottom: 20px;\n  }\n  \n  .resource-card h3 {\n    color: var(--primary);\n    font-size: 1.4rem;\n    margin-bottom: 15px;\n  }\n  \n  .resource-card p {\n    margin-bottom: 20px;\n  }\n  \n  .resource-link {\n    display: inline-block;\n    color: var(--primary);\n    text-decoration: none;\n    font-weight: 600;\n    padding-bottom: 3px;\n    border-bottom: 2px solid transparent;\n    transition: border-color 0.3s ease;\n  }\n  \n  .resource-link:hover {\n    border-color: var(--primary);\n  }\n  \n  .view-all {\n    text-align: center;\n    margin-top: 40px;\n  }\n  \n  .view-all-link {\n    display: inline-block;\n    padding: 12px 25px;\n    background-color: var(--primary);\n    color: white;\n    text-decoration: none;\n    border-radius: 30px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n  }\n  \n  .view-all-link:hover {\n    background-color: var(--hover-bg);\n  }\n  \n  /* Join Section */\n  .join-section {\n    background: linear-gradient(rgba(0, 121, 107, 0.9), rgba(0, 77, 64, 0.9));\n    background-size: cover;\n    background-position: center;\n    color: white;\n    text-align: center;\n    padding: 100px 20px;\n  }\n  \n  .join-section h2 {\n    font-size: 2.2rem;\n    margin-bottom: 20px;\n  }\n  \n  .join-section p {\n    font-size: 1.2rem;\n    margin-bottom: 40px;\n    max-width: 700px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n  \n  .join-button {\n    display: inline-block;\n    padding: 15px 40px;\n    background-color: white;\n    color: var(--primary);\n    text-decoration: none;\n    border-radius: 30px;\n    font-weight: 600;\n    font-size: 1.1rem;\n    transition: all 0.3s ease;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n  }\n  \n  .join-button:hover {\n    background-color: var(--light-blue);\n    transform: translateY(-3px);\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);\n  }\n  \n  /* Responsive Styles */\n  @media (max-width: 768px) {\n    .hero-section h1 {\n      font-size: 2.2rem;\n    }\n    \n    .hero-section h2 {\n      font-size: 1.2rem;\n    }\n    \n    .cta-buttons {\n      flex-direction: column;\n      align-items: center;\n    }\n    \n    .cta-button {\n      width: 100%;\n      max-width: 300px;\n    }\n    \n    .founder-content {\n      flex-direction: column;\n    }\n    \n    .feature-icon {\n      font-size: 1.6rem;\n    }\n  }\n  \n  @media (max-width: 480px) {\n    .hero-section {\n      padding: 80px 20px;\n    }\n    \n    .hero-section h1 {\n      font-size: 1.8rem;\n    }\n    \n    .mission-section h2,\n    .founder-section h2,\n    .resources-preview h2,\n    .join-section h2 {\n      font-size: 1.8rem;\n    }\n    \n    .quote-block {\n      font-size: 1rem;\n    }\n  }"],sourceRoot:""}]);const l=i},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},840:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([e.id,"/* client/src/components/Navbar.css */\n.navbar {\n  background-color: rgba(255, 255, 255, 0.95);\n  padding: 1rem 2rem;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  backdrop-filter: blur(10px);\n  position: sticky;\n  top: 0;\n  z-index: 1000;\n}\n\n.navbar-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 1200px;\n  padding: 0 20px;\n}\n\n.navbar-logo {\n  text-decoration: none;\n  color: #4527A0;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.logo-icon {\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: linear-gradient(45deg, #4527A0, #7B1FA2);\n  border-radius: 8px;\n  padding: 6px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.logo-icon svg {\n  width: 20px;\n  height: 20px;\n  color: white;\n}\n\n.logo-text {\n  margin-left: 5px;\n}\n\n.nav-menu {\n  display: flex;\n  align-items: center;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.nav-item {\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n}\n\n.nav-link {\n  color: #2c3e50;\n  text-decoration: none;\n  padding: 8px 2px;\n  font-weight: 500;\n  transition: color 0.3s ease;\n}\n\n.nav-link:hover {\n  color: #00796b;\n}\n\n.nav-item-button {\n  margin-left: 15px;\n}\n\n.nav-button {\n  background-color: #ff9e80;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 30px;\n  text-decoration: none;\n  font-weight: 600;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.nav-button:hover {\n  background-color: #ff7d57;\n  transform: translateY(-3px);\n}","",{version:3,sources:["webpack://./client/src/components/Navbar.css"],names:[],mappings:"AAAA,qCAAqC;AACrC;EACE,2CAA2C;EAC3C,kBAAkB;EAClB,qCAAqC;EACrC,2BAA2B;EAC3B,gBAAgB;EAChB,MAAM;EACN,aAAa;AACf;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,WAAW;EACX,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,oDAAoD;EACpD,kBAAkB;EAClB,YAAY;EACZ,qCAAqC;AACvC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,eAAe;EACf,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,gBAAgB;EAChB,gBAAgB;EAChB,2BAA2B;AAC7B;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,qBAAqB;EACrB,gBAAgB;EAChB,wCAAwC;EACxC,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;EACzB,2BAA2B;AAC7B",sourcesContent:["/* client/src/components/Navbar.css */\n.navbar {\n  background-color: rgba(255, 255, 255, 0.95);\n  padding: 1rem 2rem;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  backdrop-filter: blur(10px);\n  position: sticky;\n  top: 0;\n  z-index: 1000;\n}\n\n.navbar-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 1200px;\n  padding: 0 20px;\n}\n\n.navbar-logo {\n  text-decoration: none;\n  color: #4527A0;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.logo-icon {\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: linear-gradient(45deg, #4527A0, #7B1FA2);\n  border-radius: 8px;\n  padding: 6px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.logo-icon svg {\n  width: 20px;\n  height: 20px;\n  color: white;\n}\n\n.logo-text {\n  margin-left: 5px;\n}\n\n.nav-menu {\n  display: flex;\n  align-items: center;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.nav-item {\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n}\n\n.nav-link {\n  color: #2c3e50;\n  text-decoration: none;\n  padding: 8px 2px;\n  font-weight: 500;\n  transition: color 0.3s ease;\n}\n\n.nav-link:hover {\n  color: #00796b;\n}\n\n.nav-item-button {\n  margin-left: 15px;\n}\n\n.nav-button {\n  background-color: #ff9e80;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 30px;\n  text-decoration: none;\n  font-weight: 600;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.nav-button:hover {\n  background-color: #ff7d57;\n  transform: translateY(-3px);\n}"],sourceRoot:""}]);const l=i},848:(e,n,t)=>{e.exports=t(20)},961:(e,n,t)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(551)},982:(e,n,t)=>{e.exports=t(463)}},r={};function a(e){var n=r[e];if(void 0!==n)return n.exports;var o=r[e]={id:e,exports:{}};return t[e](o,o.exports,a),o.exports}a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var o=Object.create(null);a.r(o);var i={};e=e||[null,n({}),n([]),n(n)];for(var l=2&r&&t;"object"==typeof l&&!~e.indexOf(l);l=n(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>t[e]));return i.default=()=>t,a.d(o,i),o},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nc=void 0;var o,i=a(540),l=a.t(i,2),s=a(338),u=a(961),c=a.t(u,2);function d(){return d=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},d.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(o||(o={}));const f="popstate";function p(e,n){if(!1===e||null==e)throw new Error(n)}function m(e,n){if(!e){"undefined"!=typeof console&&console.warn(n);try{throw new Error(n)}catch(e){}}}function h(e,n){return{usr:e.state,key:e.key,idx:n}}function A(e,n,t,r){return void 0===t&&(t=null),d({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof n?v(n):n,{state:t,key:n&&n.key||r||Math.random().toString(36).substr(2,8)})}function g(e){let{pathname:n="/",search:t="",hash:r=""}=e;return t&&"?"!==t&&(n+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(n+="#"===r.charAt(0)?r:"#"+r),n}function v(e){let n={};if(e){let t=e.indexOf("#");t>=0&&(n.hash=e.substr(t),e=e.substr(0,t));let r=e.indexOf("?");r>=0&&(n.search=e.substr(r),e=e.substr(0,r)),e&&(n.pathname=e)}return n}var b;function y(e,n,t){return void 0===t&&(t="/"),function(e,n,t,r){let a=T(("string"==typeof n?v(n):n).pathname||"/",t);if(null==a)return null;let o=x(e);!function(e){e.sort(((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){return e.length===n.length&&e.slice(0,-1).every(((e,t)=>e===n[t]))?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),n.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let n=P(a);i=_(o[e],n,r)}return i}(e,n,t,!1)}function x(e,n,t,r){void 0===n&&(n=[]),void 0===t&&(t=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(p(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=O([r,i.relativePath]),s=t.concat(i);e.children&&e.children.length>0&&(p(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),x(e.children,n,s,l)),(null!=e.path||e.index)&&n.push({path:l,score:j(l,e.index),routesMeta:s})};return e.forEach(((e,n)=>{var t;if(""!==e.path&&null!=(t=e.path)&&t.includes("?"))for(let t of C(e.path))a(e,n,t);else a(e,n)})),n}function C(e){let n=e.split("/");if(0===n.length)return[];let[t,...r]=n,a=t.endsWith("?"),o=t.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=C(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((n=>e.startsWith("/")&&""===n?"/":n))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(b||(b={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const B=/^:[\w-]+$/,E=3,k=2,w=1,S=10,I=-2,N=e=>"*"===e;function j(e,n){let t=e.split("/"),r=t.length;return t.some(N)&&(r+=I),n&&(r+=k),t.filter((e=>!N(e))).reduce(((e,n)=>e+(B.test(n)?E:""===n?w:S)),r)}function _(e,n,t){void 0===t&&(t=!1);let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],s=e===r.length-1,u="/"===o?n:n.slice(o.length)||"/",c=z({path:l.relativePath,caseSensitive:l.caseSensitive,end:s},u),d=l.route;if(!c&&s&&t&&!r[r.length-1].route.index&&(c=z({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},u)),!c)return null;Object.assign(a,c.params),i.push({params:a,pathname:O([o,c.pathname]),pathnameBase:F(O([o,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(o=O([o,c.pathnameBase]))}return i}function z(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n,t){void 0===n&&(n=!1),void 0===t&&(t=!0),m("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,n,t)=>(r.push({paramName:n,isOptional:null!=t}),t?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):t?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=n.match(t);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,n,t)=>{let{paramName:r,isOptional:a}=n;if("*"===r){let e=l[t]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const s=l[t];return e[r]=a&&!s?void 0:(s||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function P(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(n){return m(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}function T(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=n.endsWith("/")?n.length-1:n.length,r=e.charAt(t);return r&&"/"!==r?null:e.slice(t)||"/"}function R(e,n,t,r){return"Cannot include a '"+e+"' character in a manually specified `to."+n+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+t+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function L(e,n){let t=function(e){return e.filter(((e,n)=>0===n||e.route.path&&e.route.path.length>0))}(e);return n?t.map(((e,n)=>n===t.length-1?e.pathname:e.pathnameBase)):t.map((e=>e.pathnameBase))}function M(e,n,t,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=v(e):(a=d({},e),p(!a.pathname||!a.pathname.includes("?"),R("?","pathname","search",a)),p(!a.pathname||!a.pathname.includes("#"),R("#","pathname","hash",a)),p(!a.search||!a.search.includes("#"),R("#","search","hash",a)));let o,i=""===e||""===a.pathname,l=i?"/":a.pathname;if(null==l)o=t;else{let e=n.length-1;if(!r&&l.startsWith("..")){let n=l.split("/");for(;".."===n[0];)n.shift(),e-=1;a.pathname=n.join("/")}o=e>=0?n[e]:"/"}let s=function(e,n){void 0===n&&(n="/");let{pathname:t,search:r="",hash:a=""}="string"==typeof e?v(e):e,o=t?t.startsWith("/")?t:function(e,n){let t=n.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?t.length>1&&t.pop():"."!==e&&t.push(e)})),t.length>1?t.join("/"):"/"}(t,n):n;return{pathname:o,search:D(r),hash:U(a)}}(a,o),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&t.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}const O=e=>e.join("/").replace(/\/\/+/g,"/"),F=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),D=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",U=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const q=["post","put","patch","delete"],W=(new Set(q),["get",...q]);function V(){return V=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},V.apply(this,arguments)}new Set(W),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const Q=i.createContext(null),H=i.createContext(null),$=i.createContext(null),Y=i.createContext(null),X=i.createContext({outlet:null,matches:[],isDataRoute:!1}),K=i.createContext(null);function Z(){return null!=i.useContext(Y)}function G(){return Z()||p(!1),i.useContext(Y).location}function J(e){i.useContext($).static||i.useLayoutEffect(e)}function ee(){let{isDataRoute:e}=i.useContext(X);return e?function(){let{router:e}=function(){let e=i.useContext(Q);return e||p(!1),e}(le.UseNavigateStable),n=ue(se.UseNavigateStable),t=i.useRef(!1);J((()=>{t.current=!0}));let r=i.useCallback((function(r,a){void 0===a&&(a={}),t.current&&("number"==typeof r?e.navigate(r):e.navigate(r,V({fromRouteId:n},a)))}),[e,n]);return r}():function(){Z()||p(!1);let e=i.useContext(Q),{basename:n,future:t,navigator:r}=i.useContext($),{matches:a}=i.useContext(X),{pathname:o}=G(),l=JSON.stringify(L(a,t.v7_relativeSplatPath)),s=i.useRef(!1);J((()=>{s.current=!0}));let u=i.useCallback((function(t,a){if(void 0===a&&(a={}),!s.current)return;if("number"==typeof t)return void r.go(t);let i=M(t,JSON.parse(l),o,"path"===a.relative);null==e&&"/"!==n&&(i.pathname="/"===i.pathname?n:O([n,i.pathname])),(a.replace?r.replace:r.push)(i,a.state,a)}),[n,r,l,o,e]);return u}()}function ne(e,n){let{relative:t}=void 0===n?{}:n,{future:r}=i.useContext($),{matches:a}=i.useContext(X),{pathname:o}=G(),l=JSON.stringify(L(a,r.v7_relativeSplatPath));return i.useMemo((()=>M(e,JSON.parse(l),o,"path"===t)),[e,l,o,t])}function te(e,n,t,r){Z()||p(!1);let{navigator:a,static:l}=i.useContext($),{matches:s}=i.useContext(X),u=s[s.length-1],c=u?u.params:{},d=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let f,m=G();if(n){var h;let e="string"==typeof n?v(n):n;"/"===d||(null==(h=e.pathname)?void 0:h.startsWith(d))||p(!1),f=e}else f=m;let A=f.pathname||"/",g=A;if("/"!==d){let e=d.replace(/^\//,"").split("/");g="/"+A.replace(/^\//,"").split("/").slice(e.length).join("/")}let b=!l&&t&&t.matches&&t.matches.length>0?t.matches:y(e,{pathname:g}),x=function(e,n,t,r){var a;if(void 0===n&&(n=[]),void 0===t&&(t=null),void 0===r&&(r=null),null==e){var o;if(!t)return null;if(t.errors)e=t.matches;else{if(!(null!=(o=r)&&o.v7_partialHydration&&0===n.length&&!t.initialized&&t.matches.length>0))return null;e=t.matches}}let l=e,s=null==(a=t)?void 0:a.errors;if(null!=s){let e=l.findIndex((e=>e.route.id&&void 0!==(null==s?void 0:s[e.route.id])));e>=0||p(!1),l=l.slice(0,Math.min(l.length,e+1))}let u=!1,c=-1;if(t&&r&&r.v7_partialHydration)for(let e=0;e<l.length;e++){let n=l[e];if((n.route.HydrateFallback||n.route.hydrateFallbackElement)&&(c=e),n.route.id){let{loaderData:e,errors:r}=t,a=n.route.loader&&void 0===e[n.route.id]&&(!r||void 0===r[n.route.id]);if(n.route.lazy||a){u=!0,l=c>=0?l.slice(0,c+1):[l[0]];break}}}return l.reduceRight(((e,r,a)=>{let o,d=!1,f=null,p=null;var m;t&&(o=s&&r.route.id?s[r.route.id]:void 0,f=r.route.errorElement||ae,u&&(c<0&&0===a?(ce[m="route-fallback"]||(ce[m]=!0),d=!0,p=null):c===a&&(d=!0,p=r.route.hydrateFallbackElement||null)));let h=n.concat(l.slice(0,a+1)),A=()=>{let n;return n=o?f:d?p:r.route.Component?i.createElement(r.route.Component,null):r.route.element?r.route.element:e,i.createElement(ie,{match:r,routeContext:{outlet:e,matches:h,isDataRoute:null!=t},children:n})};return t&&(r.route.ErrorBoundary||r.route.errorElement||0===a)?i.createElement(oe,{location:t.location,revalidation:t.revalidation,component:f,error:o,children:A(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):A()}),null)}(b&&b.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:O([d,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?d:O([d,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),s,t,r);return n&&x?i.createElement(Y.Provider,{value:{location:V({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:o.Pop}},x):x}function re(){let e=function(){var e;let n=i.useContext(K),t=function(){let e=i.useContext(H);return e||p(!1),e}(se.UseRouteError),r=ue(se.UseRouteError);return void 0!==n?n:null==(e=t.errors)?void 0:e[r]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),t=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return i.createElement(i.Fragment,null,i.createElement("h2",null,"Unexpected Application Error!"),i.createElement("h3",{style:{fontStyle:"italic"}},n),t?i.createElement("pre",{style:r},t):null,null)}const ae=i.createElement(re,null);class oe extends i.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location||"idle"!==n.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:n.error,location:n.location,revalidation:e.revalidation||n.revalidation}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return void 0!==this.state.error?i.createElement(X.Provider,{value:this.props.routeContext},i.createElement(K.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ie(e){let{routeContext:n,match:t,children:r}=e,a=i.useContext(Q);return a&&a.static&&a.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=t.route.id),i.createElement(X.Provider,{value:n},r)}var le=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(le||{}),se=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(se||{});function ue(e){let n=function(){let e=i.useContext(X);return e||p(!1),e}(),t=n.matches[n.matches.length-1];return t.route.id||p(!1),t.route.id}const ce={};function de(e){p(!1)}function fe(e){let{basename:n="/",children:t=null,location:r,navigationType:a=o.Pop,navigator:l,static:s=!1,future:u}=e;Z()&&p(!1);let c=n.replace(/^\/*/,"/"),d=i.useMemo((()=>({basename:c,navigator:l,static:s,future:V({v7_relativeSplatPath:!1},u)})),[c,u,l,s]);"string"==typeof r&&(r=v(r));let{pathname:f="/",search:m="",hash:h="",state:A=null,key:g="default"}=r,b=i.useMemo((()=>{let e=T(f,c);return null==e?null:{location:{pathname:e,search:m,hash:h,state:A,key:g},navigationType:a}}),[c,f,m,h,A,g,a]);return null==b?null:i.createElement($.Provider,{value:d},i.createElement(Y.Provider,{children:t,value:b}))}function pe(e){let{children:n,location:t}=e;return te(me(n),t)}function me(e,n){void 0===n&&(n=[]);let t=[];return i.Children.forEach(e,((e,r)=>{if(!i.isValidElement(e))return;let a=[...n,r];if(e.type===i.Fragment)return void t.push.apply(t,me(e.props.children,a));e.type!==de&&p(!1),e.props.index&&e.props.children&&p(!1);let o={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(o.children=me(e.props.children,a)),t.push(o)})),t}function he(){return he=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},he.apply(this,arguments)}l.startTransition,new Promise((()=>{})),i.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Ae=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"];try{window.__reactRouterVersion="6"}catch(e){}new Map;const ge=l.startTransition;function ve(e){let{basename:n,children:t,future:r,window:a}=e,l=i.useRef();null==l.current&&(l.current=function(e){return void 0===e&&(e={}),function(e,n,t,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:i=!1}=r,l=a.history,s=o.Pop,u=null,c=m();function m(){return(l.state||{idx:null}).idx}function v(){s=o.Pop;let e=m(),n=null==e?null:e-c;c=e,u&&u({action:s,location:y.location,delta:n})}function b(e){let n="null"!==a.location.origin?a.location.origin:a.location.href,t="string"==typeof e?e:g(e);return t=t.replace(/ $/,"%20"),p(n,"No window.location.(origin|href) available to create URL for href: "+t),new URL(t,n)}null==c&&(c=0,l.replaceState(d({},l.state,{idx:c}),""));let y={get action(){return s},get location(){return e(a,l)},listen(e){if(u)throw new Error("A history only accepts one active listener");return a.addEventListener(f,v),u=e,()=>{a.removeEventListener(f,v),u=null}},createHref:e=>n(a,e),createURL:b,encodeLocation(e){let n=b(e);return{pathname:n.pathname,search:n.search,hash:n.hash}},push:function(e,n){s=o.Push;let r=A(y.location,e,n);t&&t(r,e),c=m()+1;let d=h(r,c),f=y.createHref(r);try{l.pushState(d,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(f)}i&&u&&u({action:s,location:y.location,delta:1})},replace:function(e,n){s=o.Replace;let r=A(y.location,e,n);t&&t(r,e),c=m();let a=h(r,c),d=y.createHref(r);l.replaceState(a,"",d),i&&u&&u({action:s,location:y.location,delta:0})},go:e=>l.go(e)};return y}((function(e,n){let{pathname:t,search:r,hash:a}=e.location;return A("",{pathname:t,search:r,hash:a},n.state&&n.state.usr||null,n.state&&n.state.key||"default")}),(function(e,n){return"string"==typeof n?n:g(n)}),null,e)}({window:a,v5Compat:!0}));let s=l.current,[u,c]=i.useState({action:s.action,location:s.location}),{v7_startTransition:m}=r||{},v=i.useCallback((e=>{m&&ge?ge((()=>c(e))):c(e)}),[c,m]);return i.useLayoutEffect((()=>s.listen(v)),[s,v]),i.useEffect((()=>{return null==(e=r)||e.v7_startTransition,void 0!==(null==e?void 0:e.v7_relativeSplatPath)||n&&n.v7_relativeSplatPath,void(n&&(n.v7_fetcherPersist,n.v7_normalizeFormMethod,n.v7_partialHydration,n.v7_skipActionErrorRevalidation));var e,n}),[r]),i.createElement(fe,{basename:n,children:t,location:u.location,navigationType:u.action,navigator:s,future:r})}c.flushSync,l.useId;const be="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ye=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,xe=i.forwardRef((function(e,n){let t,{onClick:r,relative:a,reloadDocument:o,replace:l,state:s,target:u,to:c,preventScrollReset:d,viewTransition:f}=e,m=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,Ae),{basename:h}=i.useContext($),A=!1;if("string"==typeof c&&ye.test(c)&&(t=c,be))try{let e=new URL(window.location.href),n=c.startsWith("//")?new URL(e.protocol+c):new URL(c),t=T(n.pathname,h);n.origin===e.origin&&null!=t?c=t+n.search+n.hash:A=!0}catch(e){}let v=function(e,n){let{relative:t}=void 0===n?{}:n;Z()||p(!1);let{basename:r,navigator:a}=i.useContext($),{hash:o,pathname:l,search:s}=ne(e,{relative:t}),u=l;return"/"!==r&&(u="/"===l?r:O([r,l])),a.createHref({pathname:u,search:s,hash:o})}(c,{relative:a}),b=function(e,n){let{target:t,replace:r,state:a,preventScrollReset:o,relative:l,viewTransition:s}=void 0===n?{}:n,u=ee(),c=G(),d=ne(e,{relative:l});return i.useCallback((n=>{if(function(e,n){return!(0!==e.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(n,t)){n.preventDefault();let t=void 0!==r?r:g(c)===g(d);u(e,{replace:t,state:a,preventScrollReset:o,relative:l,viewTransition:s})}}),[c,u,d,r,a,t,e,o,l,s])}(c,{replace:l,state:s,target:u,preventScrollReset:d,relative:a,viewTransition:f});return i.createElement("a",he({},m,{href:t||v,onClick:A||o?r:function(e){r&&r(e),e.defaultPrevented||b(e)},ref:n,target:u}))}));var Ce,Be;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Ce||(Ce={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Be||(Be={}));var Ee=a(72),ke=a.n(Ee),we=a(825),Se=a.n(we),Ie=a(659),Ne=a.n(Ie),je=a(56),_e=a.n(je),ze=a(159),Pe=a.n(ze),Te=a(113),Re=a.n(Te),Le=a(840),Me={};Me.styleTagTransform=Re(),Me.setAttributes=_e(),Me.insert=Ne().bind(null,"head"),Me.domAPI=Se(),Me.insertStyleElement=Pe(),ke()(Le.A,Me),Le.A&&Le.A.locals&&Le.A.locals;var Oe=a(848);const Fe=function(){return(0,Oe.jsx)("nav",{className:"navbar",children:(0,Oe.jsxs)("div",{className:"navbar-container",children:[(0,Oe.jsx)("a",{href:"/",className:"navbar-logo",children:(0,Oe.jsx)("div",{className:"logo-icon",children:(0,Oe.jsx)("svg",{viewBox:"0 0 24 24",fill:"currentColor",height:"24",width:"24",children:(0,Oe.jsx)("path",{d:"M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7s2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z"})})})}),(0,Oe.jsxs)("ul",{className:"nav-menu",children:[(0,Oe.jsx)("li",{className:"nav-item nav-item-button",children:(0,Oe.jsx)("a",{href:"/",className:"nav-button",children:"Home"})}),(0,Oe.jsx)("li",{className:"nav-item nav-item-button",children:(0,Oe.jsx)("a",{href:"/resources",className:"nav-button",children:"Resources"})}),(0,Oe.jsx)("li",{className:"nav-item nav-item-button",children:(0,Oe.jsx)("a",{href:"/ai-speech-therapy",className:"nav-button",children:"AI Speech Therapy"})}),(0,Oe.jsx)("li",{className:"nav-item nav-item-button",children:(0,Oe.jsx)("a",{href:"/start",className:"nav-button",children:"Get Started"})}),(0,Oe.jsx)("li",{className:"nav-item nav-item-button",children:(0,Oe.jsx)("a",{href:"/contact",className:"nav-button",children:"Contact"})})]})]})})};var De=a(699),Ue={};Ue.styleTagTransform=Re(),Ue.setAttributes=_e(),Ue.insert=Ne().bind(null,"head"),Ue.domAPI=Se(),Ue.insertStyleElement=Pe(),ke()(De.A,Ue),De.A&&De.A.locals&&De.A.locals;const qe=function(){return(0,Oe.jsxs)("div",{className:"home-container",children:[(0,Oe.jsx)("section",{className:"hero-section",children:(0,Oe.jsxs)("div",{className:"hero-content",children:[(0,Oe.jsx)("h1",{children:"💙 Empowering Every Voice. Supporting Every Journey."}),(0,Oe.jsxs)("h2",{children:["At ",(0,Oe.jsx)("em",{children:"Prasanna-AILabs"}),", we believe that every child deserves to be heard—and every parent deserves a guiding hand."]}),(0,Oe.jsxs)("div",{className:"cta-buttons",children:[(0,Oe.jsx)(xe,{to:"/start",className:"cta-button",children:"Start Your Journey"}),(0,Oe.jsx)(xe,{to:"/resources",className:"cta-button",children:"Explore Tools"}),(0,Oe.jsx)(xe,{to:"/community",className:"cta-button",children:"Join Our Community"})]})]})}),(0,Oe.jsx)("section",{className:"mission-section",children:(0,Oe.jsxs)("div",{className:"container",children:[(0,Oe.jsx)("h2",{children:"✨ Our Mission — Why This Matters So Deeply"}),(0,Oe.jsxs)("div",{className:"mission-content",children:[(0,Oe.jsxs)("p",{children:["Raising a child with special needs is not just parenting—it's a journey of ",(0,Oe.jsx)("strong",{children:"courage, compassion, and unconditional love"}),". But we know this road can also be ",(0,Oe.jsx)("strong",{children:"isolating"}),", ",(0,Oe.jsx)("strong",{children:"confusing"}),", and filled with questions that don't always have easy answers."]}),(0,Oe.jsxs)("p",{children:["That's why we created ",(0,Oe.jsx)("strong",{children:"Prasanna-AILabs"}),"— ",(0,Oe.jsx)("em",{children:"A place built from the heart. Backed by innovation. Rooted in empathy."})]})]}),(0,Oe.jsx)("div",{className:"quote-block",children:(0,Oe.jsxs)("p",{children:[(0,Oe.jsx)("em",{children:'"There is no greater disability in society than the inability to see a person as more."'})," — ",(0,Oe.jsx)("strong",{children:"Robert M. Hensel"})]})}),(0,Oe.jsxs)("div",{className:"drives-us",children:[(0,Oe.jsx)("h3",{children:"🧡 What Drives Us"}),(0,Oe.jsxs)("p",{children:["We're here to help children ",(0,Oe.jsx)("strong",{children:"speak"}),", ",(0,Oe.jsx)("strong",{children:"grow"}),", and ",(0,Oe.jsx)("strong",{children:"thrive"}),"—and to help parents feel ",(0,Oe.jsx)("strong",{children:"supported"}),", ",(0,Oe.jsx)("strong",{children:"informed"}),", and ",(0,Oe.jsx)("strong",{children:"never alone"}),"."]}),(0,Oe.jsxs)("ul",{className:"features-list",children:[(0,Oe.jsxs)("li",{children:[(0,Oe.jsx)("span",{className:"feature-icon",children:"🤖"}),(0,Oe.jsxs)("div",{className:"feature-content",children:[(0,Oe.jsx)("h4",{children:"AI Speech Therapy Tools"}),(0,Oe.jsx)("p",{children:"Personalized and playful exercises that adapt to your child's pace"})]})]}),(0,Oe.jsxs)("li",{children:[(0,Oe.jsx)("span",{className:"feature-icon",children:"📚"}),(0,Oe.jsxs)("div",{className:"feature-content",children:[(0,Oe.jsx)("h4",{children:"Helpful Resources"}),(0,Oe.jsx)("p",{children:"FAQs, guides, and parenting tips curated with love and simplicity"})]})]}),(0,Oe.jsxs)("li",{children:[(0,Oe.jsx)("span",{className:"feature-icon",children:"🏫"}),(0,Oe.jsxs)("div",{className:"feature-content",children:[(0,Oe.jsx)("h4",{children:"Scholarship & Support Info"}),(0,Oe.jsx)("p",{children:"Connecting families with real opportunities and trusted partners"})]})]}),(0,Oe.jsxs)("li",{children:[(0,Oe.jsx)("span",{className:"feature-icon",children:"🌈"}),(0,Oe.jsxs)("div",{className:"feature-content",children:[(0,Oe.jsx)("h4",{children:"Success Stories"}),(0,Oe.jsx)("p",{children:"Real families. Real breakthroughs. Real hope."})]})]})]})]}),(0,Oe.jsx)("div",{className:"quote-block",children:(0,Oe.jsxs)("p",{children:[(0,Oe.jsx)("em",{children:'"Children are not a distraction from more important work. They are the most important work."'})," — ",(0,Oe.jsx)("strong",{children:"Dr. John Trainer"})]})})]})}),(0,Oe.jsx)("section",{className:"founder-section",children:(0,Oe.jsxs)("div",{className:"container",children:[(0,Oe.jsx)("h2",{children:"💞 A Message From Our Founder"}),(0,Oe.jsxs)("div",{className:"founder-content",children:[(0,Oe.jsx)("div",{className:"founder-image",children:"Founder Photo"}),(0,Oe.jsxs)("div",{className:"founder-message",children:[(0,Oe.jsxs)("p",{children:["\"This mission is personal. I've seen the strength it takes. The hope it requires. I built this platform to give families a ",(0,Oe.jsx)("strong",{children:"digital shoulder to lean on"}),'—with tools that help and stories that heal."']}),(0,Oe.jsxs)("p",{className:"founder-signature",children:["— ",(0,Oe.jsx)("em",{children:"Prasanna Mattegunta"}),", Founder, Prasanna-AILabs"]})]})]})]})}),(0,Oe.jsx)("section",{className:"resources-preview",children:(0,Oe.jsxs)("div",{className:"container",children:[(0,Oe.jsx)("h2",{children:"Explore Our Resources"}),(0,Oe.jsxs)("div",{className:"resource-cards",children:[(0,Oe.jsxs)("div",{className:"resource-card",children:[(0,Oe.jsx)("div",{className:"resource-icon",children:"🧠"}),(0,Oe.jsx)("h3",{children:"Understanding Autism"}),(0,Oe.jsx)("p",{children:"Expert-backed guides and research for parents and caregivers."}),(0,Oe.jsx)(xe,{to:"/resources",className:"resource-link",children:"Learn More"})]}),(0,Oe.jsxs)("div",{className:"resource-card",children:[(0,Oe.jsx)("div",{className:"resource-icon",children:"🗣️"}),(0,Oe.jsx)("h3",{children:"Speech Therapy Tools"}),(0,Oe.jsx)("p",{children:"Interactive tools and resources to support communication skills."}),(0,Oe.jsx)(xe,{to:"/resources",className:"resource-link",children:"Explore Tools"})]}),(0,Oe.jsxs)("div",{className:"resource-card",children:[(0,Oe.jsx)("div",{className:"resource-icon",children:"❤️"}),(0,Oe.jsx)("h3",{children:"Parent Support"}),(0,Oe.jsx)("p",{children:"Connect with other parents and access emotional support resources."}),(0,Oe.jsx)(xe,{to:"/resources",className:"resource-link",children:"Find Support"})]})]}),(0,Oe.jsx)("div",{className:"view-all",children:(0,Oe.jsx)(xe,{to:"/resources",className:"view-all-link",children:"View All Resources"})})]})}),(0,Oe.jsx)("section",{className:"join-section",children:(0,Oe.jsxs)("div",{className:"container",children:[(0,Oe.jsx)("h2",{children:"Begin Your Journey With Us Today"}),(0,Oe.jsx)("p",{children:"Every step forward matters. Every voice deserves to be heard."}),(0,Oe.jsx)(xe,{to:"/start",className:"join-button",children:"Get Started Now"})]})})]})};var We=a(183),Ve={};function Qe(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;s=!1}else for(;!(s=(r=o.call(t)).done)&&(l.push(r.value),l.length!==n);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,n)||He(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function He(e,n){if(e){if("string"==typeof e)return $e(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?$e(e,n):void 0}}function $e(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}Ve.styleTagTransform=Re(),Ve.setAttributes=_e(),Ve.insert=Ne().bind(null,"head"),Ve.domAPI=Se(),Ve.insertStyleElement=Pe(),ke()(We.A,Ve),We.A&&We.A.locals&&We.A.locals;var Ye=[{id:"understanding",title:"Understanding Autism Spectrum Disorder (ASD)",icon:"https://img.icons8.com/color/48/brain.png",description:"Essential guides and information about autism spectrum disorder.",resources:[{title:"A Parent's Guide to Autism",description:"Comprehensive toolkit for families learning about autism for the first time.",link:"https://www.autismspeaks.org/tool-kit/parents-guide-autism",type:"Website",tags:["Guide","Parents","Basics"]},{title:"Autism Parent Handbook",description:"Detailed handbook covering signs, diagnosis, and coping strategies.",link:"https://divisionofresearch.kaiserpermanente.org/autism-handbook",type:"PDF",tags:["Handbook","Medical","Support"]},{title:"Early Signs of Autism",description:"Learn about early indicators and when to seek professional help.",link:"https://www.cdc.gov/ncbddd/autism/signs.html",type:"Article",tags:["Early Detection","Signs","Development"]}]},{id:"therapy",title:"Therapy & Intervention Resources",icon:"https://img.icons8.com/color/48/communication.png",description:"Speech therapy, behavioral intervention, and other therapeutic approaches.",resources:[{title:"Speech Therapy Activities",description:"Interactive exercises and games for speech development.",link:"https://www.speechandlanguagekids.com/free-materials/",type:"Interactive",tags:["Speech","Activities","Development"]},{title:"ABA Therapy Guide",description:"Understanding Applied Behavior Analysis therapy and its benefits.",link:"https://www.autismspeaks.org/applied-behavior-analysis-aba-0",type:"Guide",tags:["ABA","Therapy","Behavior"]}]},{id:"education",title:"Educational Support",icon:"https://img.icons8.com/color/48/school.png",description:"Resources for academic success and school integration.",resources:[{title:"IEP Guide for Parents",description:"Understanding and advocating for Individualized Education Programs.",link:"https://www.understood.org/en/school-learning/special-services/ieps",type:"Guide",tags:["Education","IEP","Rights"]},{title:"Classroom Strategies",description:"Tips for teachers and educators working with autistic students.",link:"https://www.autism.org.uk/advice-and-guidance/topics/education",type:"Resource",tags:["Teaching","Classroom","Support"]}]}];const Xe=function(){var e,n=Qe((0,i.useState)(""),2),t=n[0],r=n[1],a=Qe((0,i.useState)([]),2),o=a[0],l=a[1],s=Qe((0,i.useState)("all"),2),u=s[0],c=s[1];return(0,i.useEffect)((function(){var e=function(){document.querySelectorAll(".fade-element").forEach((function(e){e.getBoundingClientRect().top<window.innerHeight-100&&e.classList.add("fade-in")}))};return window.addEventListener("scroll",e),e(),function(){window.removeEventListener("scroll",e)}}),[]),(0,Oe.jsxs)("div",{className:"resources-container",children:[(0,Oe.jsxs)("header",{children:[(0,Oe.jsx)("h1",{children:"Autism Support Resources"}),(0,Oe.jsx)("p",{children:"Expert-curated resources to empower families and support children with autism through their journey of growth and development."}),(0,Oe.jsxs)("div",{className:"search-section",children:[(0,Oe.jsx)("div",{className:"search-bar",children:(0,Oe.jsx)("input",{type:"text",placeholder:"Search resources...",value:t,onChange:function(e){return r(e.target.value)}})}),(0,Oe.jsx)("div",{className:"tags-filter",children:(e=new Set,Ye.forEach((function(n){n.resources.forEach((function(n){n.tags.forEach((function(n){return e.add(n)}))}))})),Array.from(e).sort()).map((function(e){return(0,Oe.jsx)("button",{className:"tag ".concat(o.includes(e)?"active":""),onClick:function(){l((function(n){return n.includes(e)?n.filter((function(n){return n!==e})):[].concat(function(e){if(Array.isArray(e))return $e(e)}(t=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||He(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]);var t}))},children:e},e)}))})]})]}),(0,Oe.jsxs)("main",{className:"container",children:[(0,Oe.jsxs)("nav",{className:"category-nav",children:[(0,Oe.jsx)("button",{className:"category-btn ".concat("all"===u?"active":""),onClick:function(){return c("all")},children:"All Resources"}),Ye.map((function(e){return(0,Oe.jsxs)("button",{className:"category-btn ".concat(u===e.id?"active":""),onClick:function(){return c(e.id)},children:[(0,Oe.jsx)("img",{src:e.icon,alt:"",style:{height:"20px",marginRight:"8px"}}),e.title]},e.id)}))]}),("all"===u?Ye:Ye.filter((function(e){return e.id===u}))).map((function(e){return(0,Oe.jsxs)("div",{className:"section fade-element",children:[(0,Oe.jsxs)("h2",{children:[(0,Oe.jsx)("img",{src:e.icon,alt:"",style:{height:"40px"}}),e.title]}),(0,Oe.jsx)("p",{className:"section-description",children:e.description}),(0,Oe.jsx)("div",{className:"resources-wrapper",children:(0,Oe.jsx)("div",{className:"resources-track",children:(n=e.resources,n.filter((function(e){var n=e.title.toLowerCase().includes(t.toLowerCase())||e.description.toLowerCase().includes(t.toLowerCase()),r=0===o.length||e.tags.some((function(e){return o.includes(e)}));return n&&r}))).map((function(e,n){return(0,Oe.jsxs)("div",{className:"resource-card",children:[(0,Oe.jsx)("div",{className:"resource-type",children:e.type}),(0,Oe.jsx)("h3",{children:e.title}),(0,Oe.jsx)("p",{children:e.description}),(0,Oe.jsx)("div",{className:"resource-tags",children:e.tags.map((function(e){return(0,Oe.jsx)("span",{className:"tag",children:e},e)}))}),(0,Oe.jsxs)("a",{href:e.link,target:"_blank",rel:"noopener noreferrer",className:"resource-link",children:["Visit Resource",(0,Oe.jsx)("svg",{viewBox:"0 0 24 24",width:"16",height:"16",children:(0,Oe.jsx)("path",{fill:"currentColor",d:"M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z"})})]})]},n)}))})})]},e.id);var n}))]})]})};var Ke=[{title:"AI-Powered Speech Therapy Tools",description:"Discover AI tools designed to assist with speech therapy for children with special needs.",link:"https://www.speechtherapytalk.com/ai-speech-therapy.html",type:"Website",tags:["AI","Speech","Therapy"]},{title:"Speech Therapy Apps Using AI",description:"A curated list of mobile apps using AI for speech and language development.",link:"https://www.verywellfamily.com/best-speech-therapy-apps-4583057",type:"Apps",tags:["Apps","AI","Speech"]}];const Ze=function(){return(0,Oe.jsxs)("div",{className:"resources-page",children:[(0,Oe.jsx)("h1",{className:"resources-title",children:"AI Speech Therapy"}),(0,Oe.jsx)("p",{className:"resources-description",children:"Explore the latest in AI-powered speech therapy tools and resources for children with special needs."}),(0,Oe.jsx)("div",{className:"resource-list",children:Ke.map((function(e,n){return(0,Oe.jsxs)("div",{className:"resource-card",children:[(0,Oe.jsx)("h2",{className:"resource-title",children:e.title}),(0,Oe.jsx)("p",{className:"resource-description",children:e.description}),(0,Oe.jsx)("a",{href:e.link,className:"resource-link",target:"_blank",rel:"noopener noreferrer",children:"Visit Resource"}),(0,Oe.jsx)("div",{className:"resource-tags",children:e.tags.map((function(e,n){return(0,Oe.jsx)("span",{className:"resource-tag",children:e},n)}))})]},n)}))})]})};var Ge=a(696),Je={};Je.styleTagTransform=Re(),Je.setAttributes=_e(),Je.insert=Ne().bind(null,"head"),Je.domAPI=Se(),Je.insertStyleElement=Pe(),ke()(Ge.A,Je),Ge.A&&Ge.A.locals&&Ge.A.locals;const en=function(){return(0,Oe.jsxs)("div",{className:"app",children:[(0,Oe.jsx)(Fe,{}),(0,Oe.jsx)("main",{className:"main-content",children:(0,Oe.jsxs)(pe,{children:[(0,Oe.jsx)(de,{path:"/",element:(0,Oe.jsx)(qe,{})}),(0,Oe.jsx)(de,{path:"/resources",element:(0,Oe.jsx)(Xe,{})}),(0,Oe.jsx)(de,{path:"/ai-speech-therapy",element:(0,Oe.jsx)(Ze,{})})]})})]})};var nn=a(111),tn={};tn.styleTagTransform=Re(),tn.setAttributes=_e(),tn.insert=Ne().bind(null,"head"),tn.domAPI=Se(),tn.insertStyleElement=Pe(),ke()(nn.A,tn),nn.A&&nn.A.locals&&nn.A.locals,(0,s.H)(document.getElementById("root")).render((0,Oe.jsx)(i.StrictMode,{children:(0,Oe.jsx)(ve,{children:(0,Oe.jsx)(en,{})})})),console.log("React successfully rendered the App component")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,